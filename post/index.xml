<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts | Kanekotic</title><link>https://www.kanekotic.com/post/</link><atom:link href="https://www.kanekotic.com/post/index.xml" rel="self" type="application/rss+xml"/><description>Posts</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><copyright>kanekotic Â© 2021</copyright><lastBuildDate>Sun, 01 Jan 2017 00:00:00 +0000</lastBuildDate><image><url>https://www.kanekotic.com/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url><title>Posts</title><link>https://www.kanekotic.com/post/</link></image><item><title>Update your npm package dependencies and release with Travis</title><link>https://www.kanekotic.com/post/2018-07-11-travis-ci-update-npm-package-dependencies-and-release/</link><pubDate>Wed, 11 Jul 2018 09:27:28 +0200</pubDate><guid>https://www.kanekotic.com/post/2018-07-11-travis-ci-update-npm-package-dependencies-and-release/</guid><description>&lt;p>As a member of the community that like to generate npm packages like libraries and cli tools, sometimes is difficult to maintain everything and keep your package up to date in the dependencies side. I am a fan of having static dependencies as versioning is not being held correctly in most of the npm world. So if you dont use exact packages you could run in the issue that a broken change makes from the night to the morning your awesome tool to break.&lt;/p>
&lt;p>This practice could bring a headache to keep dependencies up to date because is a manual process. And manual process tend to be time consuming (at this point in time I have ~17 npm packages) meaning that if i want to simply do normal maintenance i will have to run everything for all those in maybe weekly or monthly bases.&lt;/p>
&lt;p>So is a bit of a no situation for maintainers, but if you dont maintain your package people will not use it, because there is a concern about how active the project is, even if there are no open issues. For solving both of this things what i have decided is to ad to my CI/CD pipeline a script that runs only on cron jobs from travis ci.&lt;/p>
&lt;pre>&lt;code class="language-yml">os: osx
language: node_js
node_js:
- node
script:
- yarn test:cov
after_success:
- if [[ &amp;quot;${TRAVIS_EVENT_TYPE}&amp;quot; = &amp;quot;cron&amp;quot; ]]; then ./upgrade.sh; fi
deploy:
skip_cleanup: true
provider: npm
email: $NPM_EMAIL
api_key: $NPM_TOKEN
on:
tags: true
&lt;/code>&lt;/pre>
&lt;p>as you can see that is the normal &lt;code>.travis.yml&lt;/code> for deploying into npm (you will have to define &lt;code>NPM_EMAIL&lt;/code> and &lt;code>NPM_TOKEN&lt;/code> as enviroment variables in your build configuration), the main diference is the step after success that if its the cron job going will run the next script.&lt;/p>
&lt;pre>&lt;code class="language-bash">#!/bin/sh
set -e
git config --global user.email $GH_EMAIL
git config --global user.name $GH_USER
git remote add origin-master https://${GH_TOKEN}@github.com/${TRAVIS_REPO_SLUG}.git &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
git fetch origin-master
git checkout -b master-local origin-master/master
yarn upgrade --latest
git add .
git commit --allow-empty -m &amp;quot;updated dependencies [skip ci]&amp;quot;
yarn test
yarn version --patch
git push --quiet origin-master master-local:master
git push --quiet origin-master master-local:master --tags
&lt;/code>&lt;/pre>
&lt;p>this script attaches the current state to a branch makes, upgrades the dependencies and if everything works fine generates a new commit and deploy a patch of the packages (you will have to define &lt;code>GH_EMAIL&lt;/code>, &lt;code>GH_USER&lt;/code> and &lt;code>GH_TOKEN&lt;/code> as environment variables in your build configuration).&lt;/p></description></item><item><title>Create your User/Organization GitHub Page with Hugo + Travis</title><link>https://www.kanekotic.com/post/2018-07-04-deploy-hugo-with-travis/</link><pubDate>Wed, 04 Jul 2018 08:35:42 +0200</pubDate><guid>https://www.kanekotic.com/post/2018-07-04-deploy-hugo-with-travis/</guid><description>&lt;p>I have just finished migrating my static blog from Hexo to Hugo and one of the main things I care about is to be able to do continuous deployment of my profile and blog. There are quite a few blog posts out there but they are based on using shell scripts and it really becomes a pain to give permissions etc. In the next few lines you will see the simplest way I have found to do this (and is currently as this blog post is being published).&lt;/p>
&lt;p>You will need to have:&lt;/p>
&lt;ul>
&lt;li>A Github account.&lt;/li>
&lt;li>A Travis CI account.&lt;/li>
&lt;li>A Github repository with source code of your web page with Hugo (*1)&lt;/li>
&lt;li>A Github repository with the name &lt;code>&amp;lt;your User or Organization&amp;gt;.github.com&lt;/code> (ex. kanekotic.github.com) (*2).&lt;/li>
&lt;li>A developer token from GitHub with commit capabilities (can create in github &lt;code>Settings -&amp;gt; Developer Settings -&amp;gt; Personal Access Token -&amp;gt; Generate New Token&lt;/code> )&lt;/li>
&lt;/ul>
&lt;p>I wont cover how to create a Hugo web page as this is best explained in the
&lt;a href="https://gohugo.io/getting-started/quick-start/" target="_blank" rel="noopener">quick start&lt;/a>) of Hugo.&lt;/p>
&lt;p>After you are happy with the content of your blog in the repository of source code (*1), and want to start deploying you will need to add a &lt;code>.travis.yml&lt;/code> with the next content&lt;/p>
&lt;pre>&lt;code class="language-yml">sudo: true
dist: trusty
install:
- sudo apt-get --yes install snapd
- sudo snap install hugo
script:
- /snap/bin/hugo
deploy:
provider: pages
local-dir: public
repo: &amp;lt;User or Organization&amp;gt;/&amp;lt;User or Organization&amp;gt;.github.com
target-branch: master
skip-cleanup: true
github-token: $GITHUB_TOKEN
committer-from-gh: true
keep-history: true
on:
branch: master
&lt;/code>&lt;/pre>
&lt;p>you will have to change the repo content to match your destination repository (*2). The previous code what does is installs hugo in the deployment machine, builds your web page and deploys using the pages plugin. If you have a custom domain make sure to set the property &lt;code>fqdn&lt;/code> to your domain, if not you will overwrite this field in each commit.&lt;/p>
&lt;p>After adding the file you will have to go to Travis web page and toggle your code repository (*1) got to &lt;code>More Options -&amp;gt; Settings -&amp;gt; Environment Variables&lt;/code> and add &lt;code>GITHUB_TOKEN&lt;/code> as the token retrieved from github.&lt;/p>
&lt;p>After this in any commit in the master branch of your web page you will get it deployed and go live.&lt;/p></description></item><item><title>Sonarqube Upgrade Error due LDAP</title><link>https://www.kanekotic.com/post/04-18-sonarqube-update-when-ldapmd/</link><pubDate>Thu, 17 Mar 2016 09:56:49 +0200</pubDate><guid>https://www.kanekotic.com/post/04-18-sonarqube-update-when-ldapmd/</guid><description>&lt;p>While upgrading Sonarqube i am getting the next error message&lt;/p>
&lt;blockquote>
&lt;p>An error happened, some parts of the page might not render correctly. Please contact the administrator if you keep on experiencing this error&lt;/p>
&lt;/blockquote>
&lt;p>As you can see the message is not to explicit, in reality it doesnt have anything to do with reality. In my case i had copy as per the instructions the &lt;code>sonar.properties&lt;/code> file. after searching i fouund this discussion
&lt;a href="https://groups.google.com/forum/#!topic/sonarqube/clYmLXuz7Nk" target="_blank" rel="noopener">post&lt;/a>.&lt;/p>
&lt;p>The problem at this point became clear, LDAP is a plugin inside Sonarqube. During the upgrade process the plugins must have not been loaded causing an unidentified section in the upgrade.&lt;/p>
&lt;p>The solution is simple:&lt;/p>
&lt;ol>
&lt;li>Comment the LDAP section.&lt;/li>
&lt;li>Go through the upgrade process of Sonarqube.&lt;/li>
&lt;li>Stop Sonarqube.&lt;/li>
&lt;li>Uncomment LDAP section.&lt;/li>
&lt;li>Start Sonarqube.&lt;/li>
&lt;/ol></description></item><item><title>ubuntu not restarting or turning off</title><link>https://www.kanekotic.com/post/04-17-ubuntu-not-turning-off-or-restartingmd/</link><pubDate>Thu, 17 Mar 2016 09:56:49 +0200</pubDate><guid>https://www.kanekotic.com/post/04-17-ubuntu-not-turning-off-or-restartingmd/</guid><description>&lt;p>Lately I have been getting tired of my operating system just not wanting to reboot or sometimes not turning off. This happens in my version off ubuntu due a problem with the energy management.
The way to solve this is changing the boot parameters for the operating system. So you will need to follow the next steps:&lt;/p>
&lt;ol>
&lt;li>Edit the grub settings file (if you use nano as at the end do CTRL+O to save CTRL+X to close)&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>sudo nano /etc/default/grub
&lt;/code>&lt;/pre>
&lt;ol start="2">
&lt;li>Eddit the next line to look similar to the next one.&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>GRUB_CMDLINE_LINUX_DEFAULT=&amp;quot;quiet splash acpi=force reboot=pci&amp;quot;
&lt;/code>&lt;/pre>
&lt;ol start="3">
&lt;li>Call the command line to update the grub (os selector for operating system)&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>sudo update-grub
&lt;/code>&lt;/pre>
&lt;p>first reboot this will not make any difference but after your first reboot as the computer will boot with the new parameters this should solve the issue.&lt;/p>
&lt;p>Disclaimer: this works in my case, every installation in different hardware than the one in my computer could have different outcomes (that i cannot be held accountable for, so use at your discretion), including booting issues that you might solve by removing the previous parameters before booting Ubuntu from grub.&lt;/p></description></item><item><title>Unit Test CheatSheet</title><link>https://www.kanekotic.com/post/03-02-unit-test-cheatsheet/</link><pubDate>Wed, 02 Mar 2016 09:56:49 +0200</pubDate><guid>https://www.kanekotic.com/post/03-02-unit-test-cheatsheet/</guid><description>&lt;p>##&lt;strong>mstest&lt;/strong>&lt;/p>
&lt;p>links:&lt;/p>
&lt;ul>
&lt;li>
&lt;a href="https://msdn.microsoft.com/en-us/library/microsoft.visualstudio.testtools.unittesting.assert.aspx" target="_blank" rel="noopener">assert&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://msdn.microsoft.com/en-us/library/microsoft.visualstudio.testtools.unittesting.collectionassert.aspx" target="_blank" rel="noopener">collection assert&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>##&lt;strong>Nunit&lt;/strong>&lt;/p>
&lt;p>links:&lt;/p>
&lt;ul>
&lt;li>
&lt;a href="https://github.com/nunit/docs/wiki/Attributes" target="_blank" rel="noopener">Attributes&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://github.com/nunit/docs/wiki/Assertions" target="_blank" rel="noopener">Assertion&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>##&lt;strong>MOQ&lt;/strong>
Example&lt;/p>
&lt;pre>&lt;code class="language-cs">public interface IFoo {
public bool DoSomething(string);
}
int calls;
var mock = new Mock&amp;lt;IFoo&amp;gt;();
mock.Setup(foo =&amp;gt; foo.DoSomething(It.IsAny&amp;lt;string&amp;gt;())).
Returns((string s) =&amp;gt; s.ToLower())
.Callback(() =&amp;gt; ++calls);
mock.SetupProperty(f =&amp;gt; f.Name, &amp;quot;foo&amp;quot;);
mock.VerifySet(foo =&amp;gt; foo.Name = &amp;quot;foo&amp;quot;);
mock.Verify(foo =&amp;gt; foo.DoSomething(It.IsAny&amp;lt;string&amp;gt;()), Times.Never());
&lt;/code>&lt;/pre>
&lt;p>##&lt;strong>Test internal Classes&lt;/strong>&lt;/p>
&lt;p>In assembly info to test internal classes you will need to know the name of the file&lt;/p>
&lt;pre>&lt;code class="language-cs">[assembly: InternalsVisibleToAttribute(&amp;quot;&amp;lt;Project Name&amp;gt;&amp;quot;)]
&lt;/code>&lt;/pre></description></item><item><title>Meteor - FlowRouter</title><link>https://www.kanekotic.com/post/02-05-meteor-flowrouter/</link><pubDate>Fri, 05 Feb 2016 09:56:49 +0200</pubDate><guid>https://www.kanekotic.com/post/02-05-meteor-flowrouter/</guid><description>&lt;p>This package is a very useful to define the navigation on your client side application. To add it just use the next command line:&lt;/p>
&lt;pre>&lt;code>meteor add kadira:flow-router
&lt;/code>&lt;/pre>
&lt;p>a static route can be done as the next code. Where name needs to be a unique identifier, and the render string has to be the name of the template.&lt;/p>
&lt;pre>&lt;code class="language-javascript">FlowRouter.route('/',
{
name: 'homeId',
action(){
BlazeLayout.render('homeTemplate');
}
});
&lt;/code>&lt;/pre>
&lt;p>in case of requiring a dynamic page. Where the change is just the second objects where you defined the child template.&lt;/p>
&lt;pre>&lt;code class="language-javascript">FlowRouter.route('/',
{
name: 'mainId',
action(){
BlazeLayout.render('mainTemplate', {mainTemplate: 'dynamicTemplate'});
}
});
&lt;/code>&lt;/pre>
&lt;p>Other interesting parts of this package is the definition of variables on the route definition (like :id in the next code).&lt;/p>
&lt;pre>&lt;code class="language-javascript">FlowRouter.route('/playlist/:id',
{
name: 'playlist',
action(){
BlazeLayout.render('main', {main: 'playlist'});
}
});
&lt;/code>&lt;/pre>
&lt;p>there is also a possibility to use it in any part of the client javascript code to do redirection by using:&lt;/p>
&lt;pre>&lt;code class="language-javascript">FlowRouter.go('home');
&lt;/code>&lt;/pre></description></item><item><title>C# - Path.Combine</title><link>https://www.kanekotic.com/post/02-04-csharp-path-combine/</link><pubDate>Thu, 04 Feb 2016 09:56:49 +0200</pubDate><guid>https://www.kanekotic.com/post/02-04-csharp-path-combine/</guid><description>&lt;p>When using path.Combine if the second argument starts with a /. the first path is ignored and will give a path based on the C: drive.&lt;/p>
&lt;pre>&lt;code class="language-csharp">var path = Path.Combine(firstpath,$@&amp;quot;\myfolder\myfile.txt&amp;quot;);
&lt;/code>&lt;/pre>
&lt;p>will not return &amp;lt;firstpath\myfolder\myfile.txt&amp;gt; will return &amp;lt;C:\\myfolder\myfile.txt&amp;gt;.&lt;/p>
&lt;h2 id="meteor---session-variables">&lt;strong>Meteor - Session variables&lt;/strong>&lt;/h2>
&lt;p>Session variables are easy to use in meteor. the can ve get and set from the javascript code using:&lt;/p>
&lt;pre>&lt;code class="language-javascript">Session.get('variableName');
Session.set('variableName', true);
&lt;/code>&lt;/pre>
&lt;p>on your HTML you can reference the get method easily by:&lt;/p>
&lt;pre>&lt;code class="language-HTML">&amp;lt;template name=&amp;quot;admin&amp;quot;&amp;gt;
{{#if $.Session.get 'variableName'}}
I am here
{{else}}
I am not here
{{/if}}
&amp;lt;/template&amp;gt;
&lt;/code>&lt;/pre></description></item><item><title>Meteor - Session variables</title><link>https://www.kanekotic.com/post/02-04-meteor-session-variables/</link><pubDate>Thu, 04 Feb 2016 09:56:49 +0200</pubDate><guid>https://www.kanekotic.com/post/02-04-meteor-session-variables/</guid><description>&lt;p>Session variables are easy to use in meteor. the can ve get and set from the javascript code using:&lt;/p>
&lt;pre>&lt;code class="language-javascript">Session.get('variableName');
Session.set('variableName', true);
&lt;/code>&lt;/pre>
&lt;p>on your HTML you can reference the get method easily by:&lt;/p>
&lt;pre>&lt;code class="language-HTML">&amp;lt;template name=&amp;quot;admin&amp;quot;&amp;gt;
{{#if $.Session.get 'variableName'}}
I am here
{{else}}
I am not here
{{/if}}
&amp;lt;/template&amp;gt;
&lt;/code>&lt;/pre></description></item><item><title>Meteor - Query subdocument</title><link>https://www.kanekotic.com/post/02-03-meteor-query-subdocument/</link><pubDate>Wed, 03 Feb 2016 09:56:49 +0200</pubDate><guid>https://www.kanekotic.com/post/02-03-meteor-query-subdocument/</guid><description>&lt;p>To make a query over a subdocument in meteor is not posible to use directly the &amp;lsquo;$&amp;rsquo; or &amp;lsquo;$elemMatch&amp;rsquo; notation. It is necesary to use the keyword &amp;lsquo;fields:&amp;rsquo; to do this. To publish just part of a mongo document you should do a query similar to this:&lt;/p>
&lt;pre>&lt;code class="language-javascript">Meteor.publish('chapter', function(id, name){
check(id,String);
check(name,String);
return Playlists.find({ _id: id }, { fields: { chapters: { $elemMatch: { name: name }}}});
});
&lt;/code>&lt;/pre>
&lt;p>That from the original document:&lt;/p>
&lt;pre>&lt;code class="language-json">{
&amp;quot;_id&amp;quot;: &amp;quot;cx8cmw5KMjHQm8czw&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;Test&amp;quot;,
&amp;quot;description&amp;quot;: &amp;quot;this is a test&amp;quot;,
&amp;quot;chapters&amp;quot;: [
{
&amp;quot;name&amp;quot;: &amp;quot;First chapter&amp;quot;,
&amp;quot;description&amp;quot;: &amp;quot;this is a video about blah blah blah&amp;quot;,
&amp;quot;video&amp;quot;: {
&amp;quot;youtube&amp;quot;: &amp;quot;yoAFDy1WS94&amp;quot;
}
},
{
&amp;quot;name&amp;quot;: &amp;quot;Second chapter&amp;quot;,
&amp;quot;description&amp;quot;: &amp;quot;this is a video about blah blah blah&amp;quot;,
&amp;quot;video&amp;quot;: {
&amp;quot;youtube&amp;quot;: &amp;quot;yoAFDy1WS94&amp;quot;
}
}
],
&amp;quot;createdAt&amp;quot;: &amp;quot;2016-02-03T07:18:52.371Z&amp;quot;,
&amp;quot;isPublic&amp;quot;: false
}
&lt;/code>&lt;/pre>
&lt;p>Will return:&lt;/p>
&lt;pre>&lt;code class="language-json">{
&amp;quot;_id&amp;quot;: &amp;quot;cx8cmw5KMjHQm8czw&amp;quot;,
&amp;quot;chapters&amp;quot;: [
{
&amp;quot;name&amp;quot;: &amp;quot;First chapter&amp;quot;,
&amp;quot;description&amp;quot;: &amp;quot;this is a video about blah blah blah&amp;quot;,
&amp;quot;video&amp;quot;: {
&amp;quot;youtube&amp;quot;: &amp;quot;ldkfkfkdlfjdkf&amp;quot;
}
}
]
}
&lt;/code>&lt;/pre>
&lt;p>This is useful if you have big documents or don&amp;rsquo;t want the complexity of having 2 different collections that need to be related. It will help with the performance and resources that your application uses.&lt;/p>
&lt;p>now if you want to use the sub-document in your UI, you should just subscribe and add a helper to access this array item, like for example:&lt;/p>
&lt;pre>&lt;code class="language-javascript">Template.chapter.onCreated(function(){
var self = this;
self.autorun(function(){
var id = FlowRouter.getParam('id');
var name = FlowRouter.getParam('name');
self.subscribe('chapter', id, name);
});
});
Template.chapter.helpers({
chapter: () =&amp;gt; {
return Playlists.findOne({}).chapters[0];
}
});
&lt;/code>&lt;/pre>
&lt;p>Finally your HTML just needs to reference the helper defined to show the information&lt;/p>
&lt;pre>&lt;code class="language-html">&amp;lt;template name=&amp;quot;chapter&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;chapter-body&amp;quot;&amp;gt;
&amp;lt;h3&amp;gt;{{ chapter.name }}&amp;lt;/h3&amp;gt;
&amp;lt;iframe width=&amp;quot;560&amp;quot; height=&amp;quot;315&amp;quot; class=&amp;quot;video&amp;quot;
src=&amp;quot;https://www.youtube.com/embed/{{ chapter.video.youtube }}&amp;quot;
frameborder=&amp;quot;0&amp;quot; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
{{ #markdown }}{{ chapter.description }}{{ /markdown }}
&amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code>&lt;/pre></description></item><item><title>TFS 2015 - vnext and sonarqube integration</title><link>https://www.kanekotic.com/post/02-01-vnext-sonarqube-integration/</link><pubDate>Mon, 01 Feb 2016 09:56:49 +0200</pubDate><guid>https://www.kanekotic.com/post/02-01-vnext-sonarqube-integration/</guid><description>&lt;p>The modifications required to use the integrated sonarqube steps are:&lt;/p>
&lt;ol>
&lt;li>On your administration panel add a new Generic Endpoint with the connection name you decide and the sonarqube server address.&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://www.kanekotic.com/img/post/sonarqube1.PNG" alt="">&lt;/p>
&lt;ol start="2">
&lt;li>Configure the start step as per the next image
&lt;ul>
&lt;li>select the endpoint configured before&lt;/li>
&lt;li>Add the project parameters:
&lt;ul>
&lt;li>key (this is an unique identifier).&lt;/li>
&lt;li>Name (display name for your software).&lt;/li>
&lt;li>Version (related software version).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://www.kanekotic.com/img/post/sonarqube2.PNG" alt="">&lt;/p></description></item><item><title>C# - Paths to system folders</title><link>https://www.kanekotic.com/post/01-29-csharp-path-to-system-folders/</link><pubDate>Fri, 29 Jan 2016 09:56:49 +0200</pubDate><guid>https://www.kanekotic.com/post/01-29-csharp-path-to-system-folders/</guid><description>&lt;p>In the Environment class there is a property called SpecialFolder. This will provide the paths to folders like: Program files, desktop, AppData, etc. The use is the next one:&lt;/p>
&lt;pre>&lt;code class="language-csharp">Environment.SpecialFolder.&amp;lt;NameSpecialFolder&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>Where &lt;NameSpecialFolder> is the given name of the folder required, for example the AppData Local folder will be&lt;/p>
&lt;pre>&lt;code class="language-csharp">Environment.SpecialFolder.LocalApplicationData
&lt;/code>&lt;/pre></description></item><item><title>C# - Paths to system folders</title><link>https://www.kanekotic.com/post/01-29-git-branches-tags-and-commits/</link><pubDate>Fri, 29 Jan 2016 09:56:49 +0200</pubDate><guid>https://www.kanekotic.com/post/01-29-git-branches-tags-and-commits/</guid><description>&lt;p>##&lt;strong>GIT - Branches, Tags and Commits&lt;/strong>&lt;/p>
&lt;p>I was concern what will happend with my comments in the case i remove a branch.&lt;/p>
&lt;p>In git Commits are independents of branch&amp;rsquo;s and Tag&amp;rsquo;s. This last two are just pointers to certain commit. Trying to delete a Branch could create unreachable commits but if this are tag they become reachable.&lt;/p>
&lt;p>Removing branches will not remove commits, they will just become unreachable. Unless they are deleted with the git-gc command for example.&lt;/p></description></item><item><title>C# - Extension methods overlap with linq</title><link>https://www.kanekotic.com/post/01-28-extension-methods-overlap-with-linq/</link><pubDate>Thu, 28 Jan 2016 09:56:49 +0200</pubDate><guid>https://www.kanekotic.com/post/01-28-extension-methods-overlap-with-linq/</guid><description>&lt;p>I have hit a corner case of extension methods and LINQ. Today I was declaring some extension methods to make my code more readable.So I created an extension method that gets an object and performs a direct cast:&lt;/p>
&lt;pre>&lt;code class="language-csharp">public static class GeneralExtensions
{
public static T Cast&amp;lt;T&amp;gt;(this object o)
{
return (T)o;
}
}
&lt;/code>&lt;/pre>
&lt;p>The intention was to be able to call my direct castings by something like this:&lt;/p>
&lt;pre>&lt;code class="language-csharp">MyObject.CastTo&amp;lt;MyInterface&amp;gt;();
&lt;/code>&lt;/pre>
&lt;p>It happens that in the same namespace I have an extension method that has a LINQ expression&lt;/p>
&lt;pre>&lt;code class="language-csharp">using System;
using System.Collections.Generic;
using System.Linq;
public static class EnumExtenstions
{
public static IEnumerable&amp;lt;string&amp;gt; UseLinq(this IEnumerable&amp;lt;object&amp;gt; collection)
{
return (from object value in collection select value.ToString() ).ToList();
}
}
&lt;/code>&lt;/pre>
&lt;p>Adding this first extension method to my code base cause the next error&lt;/p>
&lt;pre>&lt;code>Error CS1936 Could not find an implementation of the query pattern for source type 'object'. 'Select' not found.
&lt;/code>&lt;/pre>
&lt;p>Having both extension methods in different namespaces (and not referred), or rename &lt;code>Cast&amp;lt;T&amp;gt;&lt;/code> to something different solves the issue. This is caused for an overlap of the extension methods where the nearest one to the code is the one called.&lt;/p>
&lt;p>##&lt;strong>How bad Extension Methods over object could go?&lt;/strong>&lt;/p>
&lt;p>This is an extract from the answer of Eric Lippert, regarding the code:&lt;/p>
&lt;pre>&lt;code class="language-csharp">public static class GeneralExtensions
{
public static T Cast&amp;lt;T&amp;gt;(this object o)
{
return (T)o;
}
}
&lt;/code>&lt;/pre>
&lt;p>Side Effects of the &lt;code>cast&amp;lt;T&amp;gt;&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Cast&amp;lt;int&amp;gt;(123)&lt;/code> unnecessarily boxes the int, &lt;code>(int)123&lt;/code> does not.&lt;/li>
&lt;li>&lt;code>Cast&amp;lt; short &amp;gt;(123)&lt;/code> fails but &lt;code>(short)123&lt;/code> succeeds. There is no conversion from a boxed int to a short.&lt;/li>
&lt;li>Suppose you have a user-defined conversion from Animal to Shape. &lt;code>Cast&amp;lt;Shape&amp;gt;(new Tiger())&lt;/code> fails but &lt;code>(Shape) new Tiger()&lt;/code> succeeds.&lt;/li>
&lt;li>Suppose q is a nullable int that happens to be null. &lt;code>Cast&amp;lt;string&amp;gt;(q)&lt;/code> succeeds! But &lt;code>(string)q&lt;/code> would fail at compile time&lt;/li>
&lt;li>Etc&lt;/li>
&lt;/ul>
&lt;p>Cast method has some overlap with the real cast operator but is not a substitute for it. To capture the semantics of the cast operator there is a need to use dynamic, which starts the compiler at runtime and does the compile time analysis on runtime types.&lt;/p></description></item><item><title>C# - Fluent Interfaces with Extension Methods</title><link>https://www.kanekotic.com/post/01-27-interface-with-extension-methods/</link><pubDate>Wed, 27 Jan 2016 09:56:49 +0200</pubDate><guid>https://www.kanekotic.com/post/01-27-interface-with-extension-methods/</guid><description>&lt;p>I have not experiment to much with fluent interfaces. But is something cool especially to make code that is expressive.&lt;/p>
&lt;pre>&lt;code class="language-csharp">public struct Coordenates
{
public double X { get; set; }
public double Y { get; set; }
public double Z { get; set; }
}
public static class CoordenatesExtensions
{
public static Coordenates X(this Coordenates coordenates, double value)
{
coordenates.X = value;
return coordenates;
}
public static Coordenates Y(this Coordenates coordenates, double value)
{
coordenates.Y = value;
return coordenates;
}
public static Coordenates Z(this Coordenates coordenates, double value)
{
coordenates.Z = value;
return coordenates;
}
}
public class Points
{
private Coordenates point;
public Points()
{
point = new Coordenates().X(2.1).Y(2.4).Z(3.2);
}
}
&lt;/code>&lt;/pre>
&lt;p>also can be used with some language properties to make it more expressive&lt;/p>
&lt;pre>&lt;code class="language-csharp">public static class GeneralExtensions
{
public static T As&amp;lt;T&amp;gt;(this object o) where T : class
{
return o as T;
}
public static T Cast&amp;lt;T&amp;gt;(this object o)
{
return (T)o;
}
public static bool Is&amp;lt;T&amp;gt;(this object o)
{
return o is T;
}
}
&lt;/code>&lt;/pre></description></item><item><title>Meteor the beginning</title><link>https://www.kanekotic.com/post/01-27-meteor-the-beginning/</link><pubDate>Wed, 27 Jan 2016 09:56:49 +0200</pubDate><guid>https://www.kanekotic.com/post/01-27-meteor-the-beginning/</guid><description>&lt;p>##&lt;strong>Documentation&lt;/strong>&lt;/p>
&lt;p>I found a lot of interesting things in this link, i can setup my view model to a real JavaScript object.&lt;/p>
&lt;p>
&lt;a href="https://viewmodel.meteor.com/docs" target="_blank" rel="noopener">https://viewmodel.meteor.com/docs&lt;/a>&lt;/p>
&lt;p>##&lt;strong>Markdown&lt;/strong>&lt;/p>
&lt;p>To add markdown support you will have to add the markdown package:&lt;/p>
&lt;pre>&lt;code>meteor add markdown
&lt;/code>&lt;/pre>
&lt;p>If you also want your snippets of code to have some style you will also need to add the highlight.js package:&lt;/p>
&lt;pre>&lt;code>meteor add simple:highlight.js
&lt;/code>&lt;/pre>
&lt;p>##&lt;strong>AutoForm&lt;/strong>&lt;/p>
&lt;p>to get a multi-line input you need to make sure you get a textarea. This can be done in the collection definition by:&lt;/p>
&lt;pre>&lt;code class="language-js">TestSchema = new SimpleSchema({
content: {
type: String,
label: &amp;quot;Content&amp;quot;,
autoform: {
rows: 10
}
}
});
&lt;/code>&lt;/pre></description></item><item><title>Coding - C# - Complex Constructors</title><link>https://www.kanekotic.com/post/01-26-c-sharp-complex-constructors/</link><pubDate>Tue, 26 Jan 2016 09:56:49 +0200</pubDate><guid>https://www.kanekotic.com/post/01-26-c-sharp-complex-constructors/</guid><description>&lt;p>When doing complex objects using an object to help the building is welcome.&lt;/p>
&lt;pre>&lt;code class="language-csharp">public class Complex
{
double x;
double y;
double z;
float height;
float width;
string foreground;
string background;
public Complex()
{
x = 1.456;
y = 1.234;
z = 1.789;
height = 10.12;
width = 10.14;
foreground = &amp;quot;#FFF&amp;quot;;
background = &amp;quot;#FA1&amp;quot;;
}
}
&lt;/code>&lt;/pre>
&lt;p>In this way you remove some complexity of just adding steps in your constructor to something more abstract and can contain the logic.&lt;/p>
&lt;pre>&lt;code class="language-csharp">public class Complex
{
public double X { get; set; }
public double Y { get; set; }
public double Z { get; set; }
public double Height { get; set; }
public double Width { get; set; }
public string Foreground { get; set; }
public string Background { get; set; }
public Complex(ComplexBuildHelper buildHelper)
{
buildHelper.Construct(this);
}
}
public class ComplexBuildHelper
{
public void Construct(Complex reference)
{
BuildPosition(reference);
BuildDimension(reference);
BuildCharacteristics(reference);
}
private void BuildPosition(Complex reference)
{
reference.X = 1.456;
reference.Y = 1.234;
reference.Z = 1.789;
}
private void BuildDimension(Complex reference)
{
reference.Height = 10.12;
reference.Width = 10.14;
}
private void BuildCharacteristics(Complex reference)
{
reference.Foreground = &amp;quot;#FFF&amp;quot;;
reference.Background = &amp;quot;#FA1&amp;quot;;
}
}
&lt;/code>&lt;/pre></description></item><item><title>Gitbook - The beginning</title><link>https://www.kanekotic.com/post/01-26-gitbook-the-beginning/</link><pubDate>Tue, 26 Jan 2016 09:56:49 +0200</pubDate><guid>https://www.kanekotic.com/post/01-26-gitbook-the-beginning/</guid><description>&lt;p>So i have started writing using GitBook, to take notes of what i learn every day. a few things have shown up.&lt;/p>
&lt;ol>
&lt;li>There are some required files if you start from a GitHub repository that you will have to create:
&lt;ul>
&lt;li>README.md&lt;/li>
&lt;li>SUMMARY.md&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Markdown is partially working as per escape characters don&amp;rsquo;t work with # and numbering and listing get confused if they are.&lt;/li>
&lt;/ol></description></item></channel></rss>