<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Kanekotic's Site Blog</title>
        <link>https://kanekotic.com/blog</link>
        <description>Kanekotic's Site Blog</description>
        <lastBuildDate>Mon, 08 Aug 2022 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Commiting Like a Pro in NodeJs: The hooks]]></title>
            <link>https://kanekotic.com/blog/2022/08/08/commiting-like-pro-part-1</link>
            <guid>/2022/08/08/commiting-like-pro-part-1</guid>
            <pubDate>Mon, 08 Aug 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Using git hooks to make sure your commits do what you expect]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what--why-git-hooks">What &amp; Why Git hooks?<a class="hash-link" href="#what--why-git-hooks" title="Direct link to heading">​</a></h2><p>Git hooks are scripts that Git executes locally before or after events such as: commit, push, and receive.</p><p>These hooks are completly programmable trough bash scripting. Examples of what can be done:</p><ul><li>pre-commit: Enforce project coding standards.</li><li>pre-push: Run tests.</li></ul><p>This allows us to make sure we are commiting the correct things at the correct time and that we are not breaking our code just because of the mental load of doing things as a manuyal process that can be forgotten.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-to-start">How to Start<a class="hash-link" href="#how-to-start" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="add-husky">Add Husky<a class="hash-link" href="#add-husky" title="Direct link to heading">​</a></h3><p><a href="https://typicode.github.io/husky/#/" target="_blank" rel="noopener noreferrer">Husky</a> is a tool thet allows Git hooks using JavaScript configured using individual files for hooks in a <code>.husky/</code> directory.</p><p>The fastest way to install husky is by using <code>husky-init</code>, a one-time command to quickly initialize a project with husky:</p><div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">npx husky-init &amp;&amp; npm install       # npm</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npx husky-init &amp;&amp; yarn              # Yarn 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">yarn dlx husky-init --yarn2 &amp;&amp; yarn # Yarn 2+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">pnpm dlx husky-init &amp;&amp; pnpm install # pnpm</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>It will setup husky, modify package.json and create a sample pre-commit hook that you can edit. By default, it will run npm test when you commit.</p><p>To add another hook use <code>husky add</code>.</p><p>If you are not confirtable using  <code>husky-init</code> you can find other options <a href="https://typicode.github.io/husky/#/?id=manual" target="_blank" rel="noopener noreferrer">here</a>.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="add-lint-staged">Add lint-staged<a class="hash-link" href="#add-lint-staged" title="Direct link to heading">​</a></h3><p>Husky is very useful but it will run natively to git and not focus the commands in our bash scripts for all the files not only the ones we waht to commit. </p><p><a href="https://github.com/okonet/lint-staged" target="_blank" rel="noopener noreferrer">Lint Staged</a> apear to fix this problem. It allows you to run the process against staged git files that match a pattern.</p><p><a href="https://asciinema.org/a/199934" target="_blank" rel="noopener noreferrer"><img loading="lazy" src="https://asciinema.org/a/199934.svg" alt="asciicast" class="img_ev3q"></a></p><p>install <code>lint-staged</code> by adding it to your local project.</p><div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">npm install lint-staged --save-dev</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">yarn add lint-staged -D </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>in your package.json add it as a script(<code>"lint-staged": "lint-staged",</code>) and reffer it through a <code>pre-commit</code> hook. If using Husky this can be found in <code>.husky/pre-commit</code> with the next content:</p><div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">#!/bin/sh</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">. "$(dirname "$0")/_/husky.sh"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">yarn lint-staged</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>There are multiple ways to <a href="https://github.com/okonet/lint-staged#configuration" target="_blank" rel="noopener noreferrer">configure lint-staged</a>. One of them is having a <code>lint-staged.config.js</code> file in your project root folder. In this file you can express what process you want to run for what type of files. For example:</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">module</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">exports</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token string-property property" style="color:#36acaa">'*.{ts,tsx}'</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'yarn tsc:check'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'yarn format'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'yarn lint:fix'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'yarn test'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'git add .'</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The previous snipped runs the compiler check, formating, linting and test before adding the fixed staged files to the current commit.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a class="hash-link" href="#conclusion" title="Direct link to heading">​</a></h2><p>With this two tools we will now be pushing code that will pass similar checks than our CI/CD system.</p>]]></content:encoded>
            <category>agile</category>
            <category>webdev</category>
            <category>programming</category>
            <category>productivity</category>
        </item>
        <item>
            <title><![CDATA[APIs the Singleton of our generation]]></title>
            <link>https://kanekotic.com/blog/2022/08/02/api-singleton</link>
            <guid>/2022/08/02/api-singleton</guid>
            <pubDate>Tue, 02 Aug 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[In the current world of development we solve all with APIs]]></description>
            <content:encoded><![CDATA[<p>Human are a expectable result being, we want simple thinks we can relate to, and communication is no different, if its not natural or complex we tend to rechasar it.
This naturality is in part why the singleton pattern was so widely overused. Humans have a requirement of feeling they are in control, in this case the control of the entity you speak to, example of this is you will preffer to speak with a friend about your issue than actually go around on the street talking with anyone because you will be unable to control who this entity will comunicate your message to in the future.
The web has a similar control pattern that we relate to as humans, always been powered by servers and architectures have been normally been based on a request/response expectation. I think normally because we are used to this as humans, when you talk to someone you expect them to answer.
Now every single web has their own api, specially due the proliferations of SPA, this became a must have, but is this what every web/service requires to comunicate with fellow machines? and with humans?</p>]]></content:encoded>
            <category>agile</category>
            <category>webdev</category>
            <category>programming</category>
            <category>productivity</category>
        </item>
        <item>
            <title><![CDATA[The testing piramid is actually fat]]></title>
            <link>https://kanekotic.com/blog/2022/08/02/fat-testing-piramid</link>
            <guid>/2022/08/02/fat-testing-piramid</guid>
            <pubDate>Tue, 02 Aug 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[In the world of microservices testing rules have changed]]></description>
            <content:encoded><![CDATA[<p>During a long time we have all refered to the test piramid as a normal piramid, but is this the correct shape? should unit tests run always in complete isolation?
When unit testing, dependencies tend to be moved to their own responsible portions of code. This latter on is passed into other portions of code that will use it, this is basee on the principle of inversion of control. This is great becuase we want classes or functions to do single things, and do it right.
Sometimes dependency injection becomes an obsession and we generate unrequired layers, adapters, helpers, etc. This overengineering was necesary on the past to have fully tested code as external interactions where complex and costly to simulate.
Nowadays this is not an issue anymore with docker and databases that can simulate real behaviour in memory.
, so how do we make sure that logic embeded in queries are correct? or interactions with other services are correct?</p>]]></content:encoded>
            <category>agile</category>
            <category>webdev</category>
            <category>programming</category>
            <category>testing</category>
        </item>
        <item>
            <title><![CDATA[MacroInfrastructure due Microservice Obsesion]]></title>
            <link>https://kanekotic.com/blog/2022/08/02/macroInfrastructure-microservice-obsesion</link>
            <guid>/2022/08/02/macroInfrastructure-microservice-obsesion</guid>
            <pubDate>Tue, 02 Aug 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[The over-engineering of our age]]></description>
            <content:encoded><![CDATA[<p>Cloud services and infrastructure as code during the last decade have revolutionized our industry, they have allowed us to be able to procure infrastructure in a very simple way and adaptable to the needs based on traffic. This allowed us to move from writing humongous monolithic applications to write smaller applications that run in their own infrastructure and communicate between themselves.
One of the most accepted definition of a microservice can be expressed as:
A self-contained portion of code that do not share resources with other services, can be deployed independently and should be easy to rewrite in a small portion of time.
This sounds actually great when we talk about individual parts of a software projects. I was definetly sold on it after understanding that definition.
Nevertheless when thinking about systems and how they operate. There is a point to make about granularity as software does never work on complete isolated units. It requires interactions to fullfill their purpose.
Most of the monolithic applications of the past had an issue of being over-engineered to allow changes that might never happen. Could that happen also with infrastructure? Is it currently a real problem for delivery?</p><p>Lost Overview Of The Domain
When a system grows to much in small pieces, it becomes more and more complex to have an overview of the goal of the moving parts. When pieces are to small domain events start becoming exchange of information in between nodes of a network. All this removes cohesion on the knowledge over the domain of a system, making it difficult to grasp the real intention and capabilities of concepts and actors across a system.</p><p>Why… if YAGNI
One of the main ideas of micro-services was to be able to validate assumptions fast. Before bootstrapping new services or infrastructure, there is a need to ask ourselves about the existence of a service or infrastructure that contains the domain knowledge required for the experiment in the current ecosystem.
If we are not careful experiments wont be experiments. They will be MVPs, where domain knowledge is re-implemented, just for the sake of have it as a standalone node on the system.</p><p>Repeating Yourself
When we create pieces of code that are independent there is always a certain level of bootstrapping that is required and repeated in each nodes of our systems.
This will cause not only a set of duplicated code, but also has a development time cost attached to it. Bootstraping a project in a high granularity system can be complex to standardize.</p><p>Babel tower Issue
The more parts a system has, the less heterogeneous it becomes. This at the same time translates into a more complex environment with more integration's, frameworks and bigger learning curves that affects delivery. There need to be a balance of when and where in a system a new technology is added. Decisions need to be based on needs and not on preferences.</p><p>Implicit runtime dependencies
The more a system get split the more dependency on certain node it will have. This tend to cause more dependencies in between the pieces of your infrastructure based puzzle where you start having god infrastructure points that become single point of failure, or you have chain of dependent infra that need to be deployed in a go or certain order.</p><p>Hidden Complexity
The more your microservice environment grows the more it requires a growing support infrastructure for monitoring, alerting and other services not used as part of the main system. This normally is a separate effort and has its own cost. The more a system grows those hidden complexities become a dependency for all the nodes in the system, making it a complex task to evolve and change those dependencies.</p><p>Microservices, the cloud and infrastructure as a service have definitely revolutionized our industry, nevertheless as everything there is a need for balance. Making sure we use the right tool for the job and we don't over-engineer things, not only at a code level but also at infrastructure level, as everything has a cost.</p>]]></content:encoded>
            <category>agile</category>
            <category>webdev</category>
            <category>programming</category>
            <category>architecture</category>
        </item>
        <item>
            <title><![CDATA[Resource VS Process Microservices - Round 1]]></title>
            <link>https://kanekotic.com/blog/2022/08/02/resource-process-microservices</link>
            <guid>/2022/08/02/resource-process-microservices</guid>
            <pubDate>Tue, 02 Aug 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Resource VS Process Microservices]]></description>
            <content:encoded><![CDATA[<p>During the last decade micro-services have been taking traction in the development world. Nevertheless moving from a monolithic view to a more self-served set of pieces is not an easy mental migration.
I have seen in my experience two different approaches with two very different outcomes. One is based on resources and the other one is based on process.
The resource approach is based on the idea of Object Orientation. Meaning everything should be abstracted as an object that can be manipulated overtime by the consumers of that resource. In this approach the Data is on the drivers seat.
The process approach is based on the more functional view of the world. Meaning data is transform as part of a process to achieve a specific end. In this approach the Process is on the drivers seat.
this has ramification at a few different levels.
Resource Approach
This approach makes simple to understand concepts, but tends to be very chatty and cause a high cognitive load when understanding the overal interactins. It requires either an interface to the outside world that orchestrates all the calls. Or it requires the consumer to know all the required resources and do the process on their side.
Independence
The orchestration approach, requires normally to sync different microservices and teams. This will most of the time require a set of calls that are synchronous to retrieve the correct information to query another micro-service.
This brings to the picture a concept that Jonas Boner calls microliths in this article. The idea is that if you have synchronous calls in between services to serve information, services are not independent, and cant not be treated as individual pieces.
This has the side effect that releasing microservices cant be achieved as independent pieces, ending up in releases at absurd times where it wont affect customers and a lot of environments due the complex understanding of stability of services. Causing longer release cycles and more heavy process required.
Domain Understanding
The resource view makes it very simple to understand individual pieces, and the domain of teams becomes that individual resources. This causes a need of a different layer of Domain Understanding in the orchestrator or the consuming applications. That can cause a cognitive overload.
Normally this environments require a lot of overlook from an environment perspective as they are based on having sources ofd true for each abstraction of the data. The more an environment growths the more the cognitive overload will be there causing a possible misalignment.
Business Organization
This approach normally causes an organization to be a layared one as the vertical separation is not possible, due the need to sync multiple resources. This affects at the same time independence of teams. As a team cant own from an understanding perspective any user process view, due the lack of the business domain understanding.
Process Approach
The process approach tends to be more self contained its based on the idea that duplicated data is not an issue. You do not have a source of true for the resource, what you have is a chain of custody of that resource data.
Independence
Communication on this systems normally happen through queues and teams are in charge of specific process. Based on this idea, the indirection layer provided by this allows teams and service to be in control of their own environment and have a lower amount of external dependencies simplifying.
Domain Understanding
Business Organization</p>]]></content:encoded>
            <category>agile</category>
            <category>webdev</category>
            <category>programming</category>
            <category>architecture</category>
        </item>
        <item>
            <title><![CDATA[Stop doing PR's in your Office]]></title>
            <link>https://kanekotic.com/blog/2022/08/02/stop-prs</link>
            <guid>/2022/08/02/stop-prs</guid>
            <pubDate>Tue, 02 Aug 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Update your npm package dependencies and release with Travis]]></description>
            <content:encoded><![CDATA[<p>Over the last few years some practices seem to be more a dogma than a value adding practice. One of this is <code>Pull Requests</code>. </p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="why-prs-exist">Why PR's exist<a class="hash-link" href="#why-prs-exist" title="Direct link to heading">​</a></h3><ul><li><strong>Malicious Code Prevention</strong>: Pull requests exist mostly as a practice accepted for <code>zero trust environments</code> (ex. Open Source). An attack vector on this type of environments is the ability of anyone to contribute meaning you could inject code that could create know vulnerabilities that packages will inherit. That is why maintainers validate code from unknown users.</li></ul><p><img loading="lazy" src="https://github.com/kanekotic/diagrams/blob/main/Stop%20doing%20PR.drawio.png?raw=true" alt="Malicious actors" class="img_ev3q"></p><ul><li><strong>Highly Distributed Teams</strong>: PR's can be use for highly distributed teams (around the clock) as a way to do knowledge sharing. If someone in side A of the world can follow and understand the changes for a feature that is being developed in side B of the world.</li></ul><p><img loading="lazy" src="https://github.com/kanekotic/diagrams/blob/main/Stop%20doing%20PR-Around%20The%20Clock.drawio.png?raw=true" alt="Distributed Teams" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-issue">The issue<a class="hash-link" href="#the-issue" title="Direct link to heading">​</a></h3><p>IS there any value of doing PRs when people work collocated? What is the cost of PRs in trust environments?</p><p>The value that normally people give to PRs is the one of having a <strong>peer review process</strong>. Nevertheless, we will see later in this article that there are less invasive ways to do this.</p><p>Some costs of PRs are: </p><ul><li><p><strong>Slow Delivery</strong>: PRs are a start and stop strategy where there is a gateway to merge code. This is time that needs to be taken by developers (writting &amp; preparing a PR) and reviewers (reviewing, commenting, etc) to go through the process, and at the same time is more time the code takes to get to production (merging, re-testing, etc). This is significant for features bit also for fixes, meaning you can go from a response time of minutes to hours.</p></li><li><p><strong>Isolation work</strong>: When working on branches devs work on code that works in isolation but needs to be merge with a continious stream of changes. This means that any test in isolation will probably be invalidated upon merging.</p></li><li><p><strong>Lack of ownership</strong>: As work is done in isolation the developer that creates a PR delegates part or the responsability to the reviewer. Humans don't have compilers or containers to run the code in our brain, meaning catching errors tends to be out of our realm.</p></li><li><p><strong>Egos</strong>: As catching errors tends to be out of our realm PRs tend to become a thing related to preferences (Style, patterns, etc). This hardly provides any value to the code as either tools like linters can do this automatically or it brings premature optimizations. </p></li><li><p><strong>Late feedback</strong>: Any valid recomendation is actually provided quite late in the process when the code has already been written and validated. Causing rework that takes time.</p></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-alternatives">The Alternatives<a class="hash-link" href="#the-alternatives" title="Direct link to heading">​</a></h3><p><code>Pull requests</code> are just one of the asyncronous peer code reviews styles. Is not the only way of doing peer reviews. </p><p>Some other types of peer reviews that I personally like are:</p><ul><li><strong>Over-the-shoulder</strong>: The bases of this is to have a conversation over what has been or is being implemented. This creates a syncronous feedback loop on an async process. It does not fix all the shortcommings of a PR but it creates a faster feedback loop. </li><li><strong>Pair Programming / Mob Programming</strong>: The idea is that multiple developers work in the same code base in the same computer creating a syncronoous feedback loop in a syncronous process. This in conjunction with <code>Trunk based development</code> allows very fast feedback loops at product level, and with the correct tools generates resiliance and ownership among developers.</li></ul><p>The disclaimer here is I have worked pair programming, TDD and trunk based development for more than 5 years in multiple size companies and it has always been a bliss, so I encourage every developer to actually try it.</p>]]></content:encoded>
            <category>agile</category>
            <category>webdev</category>
            <category>programming</category>
            <category>productivity</category>
        </item>
        <item>
            <title><![CDATA[Update your npm package dependencies and release with Travis]]></title>
            <link>https://kanekotic.com/blog/2018/07/11/travis-ci-update-npm-package-dependencies-and-release</link>
            <guid>/2018/07/11/travis-ci-update-npm-package-dependencies-and-release</guid>
            <pubDate>Wed, 11 Jul 2018 07:27:28 GMT</pubDate>
            <description><![CDATA[Update your npm package dependencies and release with Travis]]></description>
            <content:encoded><![CDATA[<p>As a member of the community that like to generate npm packages like libraries and cli tools, sometimes is difficult to maintain everything and keep your package up to date in the dependencies side. I am a fan of having static dependencies as versioning is not being held correctly in most of the npm world. So if you dont use exact packages you could run in the issue that a broken change makes from the night to the morning your awesome tool to break.</p><p>This practice could bring a headache to keep dependencies up to date because is a manual process. And manual process tend to be time consuming (at this point in time I have ~17 npm packages) meaning that if i want to simply do normal maintenance i will have to run everything for all those in maybe weekly or monthly bases. </p><p>So is a bit of a no situation for maintainers, but if you dont maintain your package people will not use it, because there is a concern about how active the project is, even if there are no open issues. For solving both of this things what i have decided is to ad to my CI/CD pipeline a script that runs only on cron jobs from travis ci.</p><div class="language-yml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">os</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> osx</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">language</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> node_js</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">node_js</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> node</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">script</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> yarn test</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">cov</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">after_success</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> if </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"> "$</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">TRAVIS_EVENT_TYPE</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain">" = "cron" </span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">; then ./upgrade.sh; fi</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">deploy</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">skip_cleanup</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean important" style="color:#36acaa">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">provider</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> npm</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">email</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> $NPM_EMAIL</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">api_key</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> $NPM_TOKEN</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">on</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">tags</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean important" style="color:#36acaa">true</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>as you can see that is the normal <code>.travis.yml</code> for deploying into npm (you will have to define <code>NPM_EMAIL</code> and <code>NPM_TOKEN</code> as enviroment variables in your build configuration), the main diference is the step after success that if its the cron job going will run the next script.</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token shebang important">#!/bin/sh</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token builtin class-name">set</span><span class="token plain"> -e</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> config --global user.email </span><span class="token variable" style="color:#36acaa">$GH_EMAIL</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> config --global user.name </span><span class="token variable" style="color:#36acaa">$GH_USER</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> remote </span><span class="token function" style="color:#d73a49">add</span><span class="token plain"> origin-master https://</span><span class="token variable" style="color:#36acaa">${GH_TOKEN}</span><span class="token plain">@github.com/</span><span class="token variable" style="color:#36acaa">${TRAVIS_REPO_SLUG}</span><span class="token plain">.git </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> /dev/null </span><span class="token operator file-descriptor important" style="color:#393A34">2</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token file-descriptor important">&amp;1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> fetch origin-master</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> checkout -b master-local origin-master/master</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">yarn</span><span class="token plain"> upgrade --latest</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">add</span><span class="token plain"> </span><span class="token builtin class-name">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> commit --allow-empty -m </span><span class="token string" style="color:#e3116c">"updated dependencies [skip ci]"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">yarn</span><span class="token plain"> </span><span class="token builtin class-name">test</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">yarn</span><span class="token plain"> version --patch</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> push --quiet origin-master master-local:master</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> push --quiet origin-master master-local:master --tags</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>this script attaches the current state to a branch makes, upgrades the dependencies and if everything works fine generates a new commit and deploy a patch of the packages (you will have to define <code>GH_EMAIL</code>, <code>GH_USER</code> and <code>GH_TOKEN</code> as environment variables in your build configuration).</p>]]></content:encoded>
            <category>ci</category>
            <category>cd</category>
            <category>versioning</category>
            <category>npm</category>
            <category>travis</category>
            <category>travisci</category>
            <category>github</category>
            <category>cron</category>
        </item>
        <item>
            <title><![CDATA[Create your User/Organization GitHub Page with Hugo + Travis]]></title>
            <link>https://kanekotic.com/blog/2018/07/04/deploy-hugo-with-travis</link>
            <guid>/2018/07/04/deploy-hugo-with-travis</guid>
            <pubDate>Wed, 04 Jul 2018 06:35:42 GMT</pubDate>
            <description><![CDATA[Create your User/Organization GitHub Page with Hugo + Travis]]></description>
            <content:encoded><![CDATA[<p>I have just finished migrating my static blog from Hexo to Hugo and one of the main things I care about is to be able to do continuous deployment of my profile and blog. There are quite a few blog posts out there but they are based on using shell scripts and it really becomes a pain to give permissions etc. In the next few lines you will see the simplest way I have found to do this (and is currently as this blog post is being published).</p><p>You will need to have:</p><ul><li>A Github account.</li><li>A Travis CI account.</li><li>A Github repository with source code of your web page with Hugo (*1)</li><li>A Github repository with the name <code>&lt;your User or Organization&gt;.github.com</code> (ex. kanekotic.github.com) (*2).</li><li>A developer token from GitHub with commit capabilities (can create in github <code>Settings -&gt; Developer Settings -&gt; Personal Access Token -&gt; Generate New Token</code> )</li></ul><p>I wont cover how to create a Hugo web page as this is best explained in the <a href="https://gohugo.io/getting-started/quick-start/" target="_blank" rel="noopener noreferrer">quick start</a>) of Hugo.</p><p>After you are happy with the content of your blog in the repository of source code (*1), and want to start deploying you will need to add a <code>.travis.yml</code> with the next content</p><div class="language-yml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">sudo</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean important" style="color:#36acaa">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">dist</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> trusty</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">install</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> sudo apt</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">get </span><span class="token punctuation" style="color:#393A34">-</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">yes install snapd</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> sudo snap install hugo</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">script</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> /snap/bin/hugo </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">deploy</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">provider</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> pages</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">local-dir</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> public</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">repo</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> &lt;User or Organization</span><span class="token punctuation" style="color:#393A34">&gt;</span><span class="token plain">/&lt;User or Organization</span><span class="token punctuation" style="color:#393A34">&gt;</span><span class="token plain">.github.com</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">target-branch</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> master</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">skip-cleanup</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean important" style="color:#36acaa">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">github-token</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> $GITHUB_TOKEN</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">committer-from-gh</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean important" style="color:#36acaa">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">keep-history</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean important" style="color:#36acaa">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">on</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">branch</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> master</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>you will have to change the repo content to match your destination repository (*2). The previous code what does is installs hugo in the deployment machine, builds your web page and deploys using the pages plugin. If you have a custom domain make sure to set the property <code>fqdn</code> to your domain, if not you will overwrite this field in each commit.</p><p>After adding the file you will have to go to Travis web page and toggle your code repository (*1) got to <code>More Options -&gt; Settings -&gt; Environment Variables</code> and add <code>GITHUB_TOKEN</code> as the token retrieved from github.</p><p>After this in any commit in the master branch of your web page you will get it deployed and go live.</p>]]></content:encoded>
            <category>ci</category>
            <category>cd</category>
            <category>versioning</category>
            <category>travis</category>
            <category>travisci</category>
            <category>github</category>
        </item>
        <item>
            <title><![CDATA[Unit Test CheatSheet]]></title>
            <link>https://kanekotic.com/blog/2016/03/02/unit-test-cheatsheet</link>
            <guid>/2016/03/02/unit-test-cheatsheet</guid>
            <pubDate>Wed, 02 Mar 2016 07:56:49 GMT</pubDate>
            <description><![CDATA[Unit Test CheatSheet]]></description>
            <content:encoded><![CDATA[<p>##<strong>mstest</strong></p><p>links:</p><ul><li><a href="https://msdn.microsoft.com/en-us/library/microsoft.visualstudio.testtools.unittesting.assert.aspx" target="_blank" rel="noopener noreferrer">assert</a></li><li><a href="https://msdn.microsoft.com/en-us/library/microsoft.visualstudio.testtools.unittesting.collectionassert.aspx" target="_blank" rel="noopener noreferrer">collection assert</a></li></ul><p>##<strong>Nunit</strong></p><p>links:</p><ul><li><a href="https://github.com/nunit/docs/wiki/Attributes" target="_blank" rel="noopener noreferrer">Attributes</a></li><li><a href="https://github.com/nunit/docs/wiki/Assertions" target="_blank" rel="noopener noreferrer">Assertion</a></li></ul><p>##<strong>MOQ</strong>
Example</p><div class="language-cs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-cs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public interface IFoo {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   public bool DoSomething(string);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">int calls;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var mock = new Mock&lt;IFoo&gt;();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mock.Setup(foo =&gt; foo.DoSomething(It.IsAny&lt;string&gt;())).</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         Returns((string s) =&gt; s.ToLower())</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         .Callback(() =&gt; ++calls);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mock.SetupProperty(f =&gt; f.Name, "foo");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mock.VerifySet(foo =&gt; foo.Name = "foo");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mock.Verify(foo =&gt; foo.DoSomething(It.IsAny&lt;string&gt;()), Times.Never());</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>##<strong>Test internal Classes</strong></p><p>In assembly info to test internal classes you will need to know the name of the file</p><div class="language-cs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-cs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[assembly: InternalsVisibleToAttribute("&lt;Project Name&gt;")]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
            <category>daily</category>
            <category>learn</category>
        </item>
        <item>
            <title><![CDATA[C# - Path.Combine]]></title>
            <link>https://kanekotic.com/blog/2016/02/04/csharp-path-combine</link>
            <guid>/2016/02/04/csharp-path-combine</guid>
            <pubDate>Thu, 04 Feb 2016 07:56:49 GMT</pubDate>
            <description><![CDATA[C# - Path.Combine]]></description>
            <content:encoded><![CDATA[<p>When using path.Combine if the second argument starts with a /. the first path is ignored and will give a path based on the C: drive.</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">var path = Path.Combine(firstpath,$@"\myfolder\myfile.txt");</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>will not return &lt;firstpath\myfolder\myfile.txt&gt; will return &lt;C:<!-- -->\<!-- -->\myfolder\myfile.txt&gt;.</p>]]></content:encoded>
            <category>daily</category>
            <category>learn</category>
        </item>
        <item>
            <title><![CDATA[C# - Paths to system folders]]></title>
            <link>https://kanekotic.com/blog/2016/01/29/csharp-path-to-system-folders</link>
            <guid>/2016/01/29/csharp-path-to-system-folders</guid>
            <pubDate>Fri, 29 Jan 2016 07:56:49 GMT</pubDate>
            <description><![CDATA[C# - Paths to system folders]]></description>
            <content:encoded><![CDATA[<p>In the Environment class there is a property called SpecialFolder. This will provide the paths to folders like: Program files, desktop, AppData, etc. The use is the next one:</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Environment.SpecialFolder.&lt;NameSpecialFolder&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Where <code>&lt;NameSpecialFolder&gt;</code> is the given name of the folder required, for example the AppData Local folder will be</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Environment.SpecialFolder.LocalApplicationData</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
            <category>daily</category>
            <category>learn</category>
        </item>
        <item>
            <title><![CDATA[C# - Extension methods overlap with linq]]></title>
            <link>https://kanekotic.com/blog/2016/01/28/extension-methods-overlap-with-linq</link>
            <guid>/2016/01/28/extension-methods-overlap-with-linq</guid>
            <pubDate>Thu, 28 Jan 2016 07:56:49 GMT</pubDate>
            <description><![CDATA[C# - Extension methods overlap with linq]]></description>
            <content:encoded><![CDATA[<p>I have hit a corner case of extension methods and LINQ. Today I was declaring some extension methods to make my code more readable.So I created an extension method that gets an object and performs a direct cast:</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public static class GeneralExtensions</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static T Cast&lt;T&gt;(this object o)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return (T)o;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The intention was to be able to call my direct castings by something like this:</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">MyObject.CastTo&lt;MyInterface&gt;();</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>It happens that in the same namespace I have an extension method that has a LINQ expression</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">using System;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">using System.Collections.Generic;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">using System.Linq;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public static class EnumExtenstions</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static IEnumerable&lt;string&gt; UseLinq(this IEnumerable&lt;object&gt; collection)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return (from object value in collection select value.ToString() ).ToList();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Adding this first extension method to my code base cause the next error</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Error   CS1936  Could not find an implementation of the query pattern for source type 'object'.  'Select' not found.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Having both extension methods in different namespaces (and not referred), or rename <code>Cast&lt;T&gt;</code> to something different solves the issue. This is caused for an overlap of the extension methods where the nearest one to the code is the one called.</p><p>##<strong>How bad Extension Methods over object could go?</strong></p><p>This is an extract from the answer of Eric Lippert, regarding the code:</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public static class GeneralExtensions</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static T Cast&lt;T&gt;(this object o)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return (T)o;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Side Effects of the <code>cast&lt;T&gt;</code>:</p><ul><li><code>Cast&lt;int&gt;(123)</code> unnecessarily boxes the int, <code>(int)123</code> does not.</li><li><code>Cast&lt; short &gt;(123)</code> fails but <code>(short)123</code> succeeds. There is no conversion from a boxed int to a short.</li><li>Suppose you have a user-defined conversion from Animal to Shape. <code>Cast&lt;Shape&gt;(new Tiger())</code> fails but <code>(Shape) new Tiger()</code> succeeds.</li><li>Suppose q is a nullable int that happens to be null. <code>Cast&lt;string&gt;(q)</code> succeeds! But <code>(string)q</code> would fail at compile time</li><li>Etc</li></ul><p>Cast method has some overlap with the real cast operator but is not a substitute for it. To capture the semantics of the cast operator there is a need to use dynamic, which starts the compiler at runtime and does the compile time analysis on runtime types.</p>]]></content:encoded>
            <category>daily</category>
            <category>learn</category>
        </item>
        <item>
            <title><![CDATA[C# - Fluent Interfaces with Extension Methods]]></title>
            <link>https://kanekotic.com/blog/2016/01/27/interface-with-extension-methods</link>
            <guid>/2016/01/27/interface-with-extension-methods</guid>
            <pubDate>Wed, 27 Jan 2016 07:56:49 GMT</pubDate>
            <description><![CDATA[C# - Fluent Interfaces with Extension Methods]]></description>
            <content:encoded><![CDATA[<p>I have not experiment to much with fluent interfaces. But is something cool especially to make code that is expressive.</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public struct Coordenates</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        public double X { get; set; }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        public double Y { get; set; }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        public double Z { get; set; }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static class CoordenatesExtensions</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        public static Coordenates X(this Coordenates coordenates, double value)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            coordenates.X = value;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            return coordenates;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        public static Coordenates Y(this Coordenates coordenates, double value)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            coordenates.Y = value;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            return coordenates;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        public static Coordenates Z(this Coordenates coordenates, double value)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            coordenates.Z = value;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            return coordenates;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public class Points</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        private Coordenates point;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        public Points()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            point = new Coordenates().X(2.1).Y(2.4).Z(3.2);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>also can be used with some language properties to make it more expressive</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public static class GeneralExtensions</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static T As&lt;T&gt;(this object o) where T : class</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return o as T;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static T Cast&lt;T&gt;(this object o)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return (T)o;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static bool Is&lt;T&gt;(this object o)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return o is T;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
            <category>daily</category>
            <category>learn</category>
        </item>
        <item>
            <title><![CDATA[Meteor the beginning]]></title>
            <link>https://kanekotic.com/blog/2016/01/27/meteor-the-beginning</link>
            <guid>/2016/01/27/meteor-the-beginning</guid>
            <pubDate>Wed, 27 Jan 2016 07:56:49 GMT</pubDate>
            <description><![CDATA[Meteor the beginning]]></description>
            <content:encoded><![CDATA[<p>##<strong>Documentation</strong></p><p>I found a lot of interesting things in this link, i can setup my view model to a real JavaScript object.</p><p><a href="https://viewmodel.meteor.com/docs" target="_blank" rel="noopener noreferrer">https://viewmodel.meteor.com/docs</a></p><p>##<strong>Markdown</strong></p><p>To add markdown support you will have to add the markdown package:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">meteor add markdown</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>If you also want your snippets of code to have some style you will also need to add the highlight.js package:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">meteor add simple:highlight.js</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>##<strong>AutoForm</strong></p><p>to get a multi-line input you need to make sure you get a textarea. This can be done in the collection definition by:</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token maybe-class-name">TestSchema</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">SimpleSchema</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">content</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">type</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token known-class-name class-name">String</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">label</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Content"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">autoform</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token literal-property property" style="color:#36acaa">rows</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
            <category>daily</category>
            <category>learn</category>
        </item>
        <item>
            <title><![CDATA[Coding - C# - Complex Constructors]]></title>
            <link>https://kanekotic.com/blog/2016/01/26/c-sharp-complex-constructors</link>
            <guid>/2016/01/26/c-sharp-complex-constructors</guid>
            <pubDate>Tue, 26 Jan 2016 07:56:49 GMT</pubDate>
            <description><![CDATA[Coding - C# - Complex Constructors]]></description>
            <content:encoded><![CDATA[<p>When doing complex objects using an object to help the building is welcome.</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class Complex</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    double x;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    double y;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    double z;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    float height;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    float width;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    string foreground;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    string background;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public Complex()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        x = 1.456;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        y = 1.234;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        z = 1.789;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        height = 10.12;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        width = 10.14;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        foreground = "#FFF";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        background = "#FA1";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>In this way you remove some complexity of just adding steps in your constructor to something more abstract and can contain the logic.</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class Complex</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public double X { get; set; }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public double Y { get; set; }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public double Z { get; set; }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public double Height { get; set; }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public double Width { get; set; }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public string Foreground { get; set; }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public string Background { get; set; }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public Complex(ComplexBuildHelper buildHelper)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        buildHelper.Construct(this);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class ComplexBuildHelper</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public void Construct(Complex reference)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        BuildPosition(reference);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        BuildDimension(reference);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        BuildCharacteristics(reference);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private void BuildPosition(Complex reference)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        reference.X = 1.456;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        reference.Y = 1.234;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        reference.Z = 1.789;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private void BuildDimension(Complex reference)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        reference.Height = 10.12;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        reference.Width = 10.14;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private void BuildCharacteristics(Complex reference)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        reference.Foreground = "#FFF";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        reference.Background = "#FA1";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
            <category>daily</category>
            <category>learn</category>
        </item>
    </channel>
</rss>