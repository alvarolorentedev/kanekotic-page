"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5262],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),d=p(n),m=i,k=d["".concat(c,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(k,l(l({ref:t},s),{},{components:n})):r.createElement(k,l({ref:t},s))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,l=new Array(a);l[0]=d;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var p=2;p<a;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2054:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>p});var r=n(7462),i=(n(7294),n(3905));const a={sidebar_position:100},l="Peer2Sync",o={unversionedId:"archived/peer-2-sync",id:"archived/peer-2-sync",title:"Peer2Sync",description:"logomakr_0ewpnu",source:"@site/docs/archived/peer-2-sync.md",sourceDirName:"archived",slug:"/archived/peer-2-sync",permalink:"/docs/archived/peer-2-sync",draft:!1,editUrl:"https://github.com/kanekotic/kanekotic-page/tree/main/docs/archived/peer-2-sync.md",tags:[],version:"current",sidebarPosition:100,frontMatter:{sidebar_position:100},sidebar:"tutorialSidebar",previous:{title:"MailCrypt",permalink:"/docs/archived/mail-crypt"},next:{title:"Specflow.Rider",permalink:"/docs/archived/specflow-rider"}},c={},p=[{value:"Deployment",id:"deployment",level:2},{value:"Development",id:"development",level:2},{value:"Github Repo",id:"github-repo",level:2}],s={toc:p};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"peer2sync"},"Peer2Sync"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://cloud.githubusercontent.com/assets/3071208/17784932/e2b96a14-657e-11e6-9cf9-ad0000e3e18c.png",alt:"logomakr_0ewpnu"})),(0,i.kt)("p",null,"##Intro"),(0,i.kt)("p",null,"Protocol capable of P2P (master to master) syncing key-value datastores. using ",(0,i.kt)("inlineCode",{parentName:"p"},"c++")," high performance web server with a redis backend. The path to requests is ",(0,i.kt)("inlineCode",{parentName:"p"},"/rpc")," and takes only ",(0,i.kt)("inlineCode",{parentName:"p"},"POST")," requests in ",(0,i.kt)("inlineCode",{parentName:"p"},"JSON-RPC 2.0"),". The  methods that have been implemented are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"datastorePut({ collection: String, changes: [Object]  }) -> "),": sync objects to the server."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"datastoreGet({ collection: String, all: Boolean, ids: [String] }) -> [Object]"),": retrieve all of the objects which are newer on the server."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"datastoreMeta({ collection: String }) -> [id,mtime]"),": get last modification times of all objects upstream.")),(0,i.kt)("p",null,"Arguments explanation:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"collection"),": this is a string identifier of the collection we want to sync."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"changes"),": this is an array of objects to save in the collection; every object can be anything (JSON object). Has three special properties:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"_id"),": (always required) is the object key/id. "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"_mtime"),": is the last time the object was modified. This is a ",(0,i.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Unix_time"},"POSIX time")," in millisecons."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"_delete"),": is set to true if we want to remove this object from the collection. If not it can be either false or not included."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"all"),": this is a boolean which, when set to true, makes datastoreGet return all objects in the collection"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ids"),": array of strings, specifies which objects to fetch from the database.")),(0,i.kt)("p",null,"The implementation is integrated in Travis-CI, that will generate and publish automatically containers to easy deploy the application."),(0,i.kt)("h2",{id:"deployment"},"Deployment"),(0,i.kt)("p",null,"Download the container from the docker-hub"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"docker pull kanekotic/p2s\n")),(0,i.kt)("p",null,"And execute with the next command"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"docker run -p <service port> -e PORT=<service port> -e REDIS_IP=<redis ip> -e REDIS_PORT=<redis port> --net=host kanekotic/p2s\n")),(0,i.kt)("h2",{id:"development"},"Development"),(0,i.kt)("p",null,"Current development enviroment is based on un an Ubuntu machine. Please follow the next steps to setup the enviroment: "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Basic building will require the next packages")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"sudo apt-get install redis-server libboost-all-dev gcc-5 g++-5 libgtest-dev cmake qt5-qmake qt5-default qtbase5-dev qttools5-dev-tools\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"To build gtest run ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"cd /usr/src/gtest\nsudo cmake .\nsudo cmake --build . \nsudo mv libg* /usr/local/lib/\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"you will also need to pull the dependency for the redis client trought")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"git clone https://github.com/Cylix/cpp_redis.git \ncd cpp_redis \nmkdir build \ncd build \ncmake .. \nmake -j \nsudo make install -j \nsudo cp /usr/local/lib/libcpp_redis.so /usr/lib/libcpp_redis.so\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"the code can be build using the next command line on the directory")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"qmake \nmake\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"optional")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Use ",(0,i.kt)("inlineCode",{parentName:"li"},"Qt Creator")," as development enviroment, it can be installed by:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"sudo apt-get install qtcreator\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Install and use Postman for integration testing (",(0,i.kt)("inlineCode",{parentName:"li"},"./test/Test_P2S_Postman.json"),").")),(0,i.kt)("h2",{id:"github-repo"},(0,i.kt)("a",{parentName:"h2",href:"https://github.com/kanekotic/Peer2Sync"},"Github Repo")))}u.isMDXComponent=!0}}]);