"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[252],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),h=r,m=u["".concat(l,".").concat(h)]||u[h]||d[h]||o;return n?a.createElement(m,i(i({ref:t},c),{},{components:n})):a.createElement(m,i({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6529:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const o={title:"Stop doing PR's: Not all environment are zero trust",description:"Update your npm package dependencies and release with Travis",authors:["kanekotic"],tags:["agile","webdev","programming","productivity"],draft:!1,published:!1},i=void 0,s={permalink:"/blog/2022/08/02/stop-prs",editUrl:"https://github.com/kanekotic/kanekotic-page/tree/main/blog/2022-08-02-stop-prs.md",source:"@site/blog/2022-08-02-stop-prs.md",title:"Stop doing PR's: Not all environment are zero trust",description:"Update your npm package dependencies and release with Travis",date:"2022-08-02T00:00:00.000Z",formattedDate:"August 2, 2022",tags:[{label:"agile",permalink:"/blog/tags/agile"},{label:"webdev",permalink:"/blog/tags/webdev"},{label:"programming",permalink:"/blog/tags/programming"},{label:"productivity",permalink:"/blog/tags/productivity"}],readingTime:2.005,hasTruncateMarker:!1,authors:[{name:"Alvaro Jose",title:"Great Wizard Of Stuff & Code",url:"https://github.com/kanekotic",imageURL:"https://github.com/kanekotic.png",key:"kanekotic"}],frontMatter:{title:"Stop doing PR's: Not all environment are zero trust",description:"Update your npm package dependencies and release with Travis",authors:["kanekotic"],tags:["agile","webdev","programming","productivity"],draft:!1,published:!1},nextItem:{title:"Update your npm package dependencies and release with Travis",permalink:"/blog/2018/07/11/travis-ci-update-npm-package-dependencies-and-release"}},l={authorsImageUrls:[void 0]},p=[{value:"TL;DR;",id:"tldr",level:2},{value:"Long Version",id:"long-version",level:2},{value:"Why PR&#39;s exist",id:"why-prs-exist",level:3},{value:"The issue",id:"the-issue",level:3},{value:"The Alternative",id:"the-alternative",level:3}],c={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"tldr"},"TL;DR;"),(0,r.kt)("p",null,"If you are in a collocated or same time zone team stop doing PRs and do trunk based development."),(0,r.kt)("h2",{id:"long-version"},"Long Version"),(0,r.kt)("p",null,"I have been working in multiple places over the last few years and have seen some practices that seem to be more a dogma than a value adding practice. I am specifically talking about ",(0,r.kt)("inlineCode",{parentName:"p"},"Pull Requests"),". "),(0,r.kt)("h3",{id:"why-prs-exist"},"Why PR's exist"),(0,r.kt)("p",null,"Pull requests exist mostly as a practice accepted for ",(0,r.kt)("inlineCode",{parentName:"p"},"zero trust environments")," (ex. Open Source). An attack vector on this type of environments is the ability of anyone to contribute meaning you could inject code that could create know vulnerabilities that packages will inherit. That is why maintainers validate code from unknown people."),(0,r.kt)("p",null,"Also PR's exist for highly distributed teams (around the clock) as a way to do knowledge sharing. If someone in side A of the world can follow and understand the changes for a feature that is being developed in side B of the world."),(0,r.kt)("h3",{id:"the-issue"},"The issue"),(0,r.kt)("p",null,"Currently most teams even if they work in the same office or timezone work in this PR way.\nA team should be a trust environment as we all have the same goal as we are bound by the same context. Meaning our team members are not the origin of an attack vector.\nIf we talk about knowledge sharing. There tend to be more efficient solutions like over the shoulder reviews or also pair programming.\nWith this 2 points we would be at parity with the PR value. Nevertheless PR's have a hidden cost in trust environments. One of this costs is related to ownership. Writing code that is broken in a branch does not affect anyone, at the same point some of the responsibility of validation goes to the reviewer that without the specifics need to validate if things are correct or not. We know humans suck at this, so why not let this to machines handle the responsibility?\nThe other hidden cost can be measure in throughput. PR's tend to wait and accumulate the more complex a change is the more it takes to merge it. Meaning the more time it takes to get to production. This does not only happens with features but also with fixes, meaning you can go from a capability of response time of minutes to hours."),(0,r.kt)("h3",{id:"the-alternative"},"The Alternative"),(0,r.kt)("p",null,"A lot of people would have already heard about ",(0,r.kt)("inlineCode",{parentName:"p"},"Trunk based development"),"."))}d.isMDXComponent=!0}}]);