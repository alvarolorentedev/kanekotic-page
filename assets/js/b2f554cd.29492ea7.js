"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2022/08/02/__replace__","metadata":{"permalink":"/blog/2022/08/02/__replace__","editUrl":"https://github.com/kanekotic/kanekotic-page/tree/main/blog/2022-08-02-__replace__.md","source":"@site/blog/2022-08-02-__replace__.md","title":"TheActionDev","description":"Hello World","date":"2022-08-02T00:00:00.000Z","formattedDate":"August 2, 2022","tags":[{"label":"typescript","permalink":"/blog/tags/typescript"},{"label":"javascript","permalink":"/blog/tags/javascript"},{"label":"github","permalink":"/blog/tags/github"}],"readingTime":0.04,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"TheActionDev","description":"Hello World","published":false,"tags":["typescript","javascript","github"],"series":"TheActionDev"},"nextItem":{"title":"Stop doing PR\'s: Not all environment are zero trust","permalink":"/blog/2022/08/02/stop-prs"}},"content":"First Post with **TheActionDev**\\r\\n\\r\\n{% github ful1e5/TheActionDev %}"},{"id":"/2022/08/02/stop-prs","metadata":{"permalink":"/blog/2022/08/02/stop-prs","editUrl":"https://github.com/kanekotic/kanekotic-page/tree/main/blog/2022-08-02-stop-prs.md","source":"@site/blog/2022-08-02-stop-prs.md","title":"Stop doing PR\'s: Not all environment are zero trust","description":"Update your npm package dependencies and release with Travis","date":"2022-08-02T00:00:00.000Z","formattedDate":"August 2, 2022","tags":[{"label":"agile","permalink":"/blog/tags/agile"},{"label":"webdev","permalink":"/blog/tags/webdev"},{"label":"programming","permalink":"/blog/tags/programming"},{"label":"productivity","permalink":"/blog/tags/productivity"}],"readingTime":2.005,"hasTruncateMarker":false,"authors":[{"name":"Alvaro Jose","title":"Great Wizard Of Stuff & Code","url":"https://github.com/kanekotic","imageURL":"https://github.com/kanekotic.png","key":"kanekotic"}],"frontMatter":{"title":"Stop doing PR\'s: Not all environment are zero trust","description":"Update your npm package dependencies and release with Travis","authors":["kanekotic"],"tags":["agile","webdev","programming","productivity"],"draft":false,"published":false},"prevItem":{"title":"TheActionDev","permalink":"/blog/2022/08/02/__replace__"},"nextItem":{"title":"Update your npm package dependencies and release with Travis","permalink":"/blog/2018/07/11/travis-ci-update-npm-package-dependencies-and-release"}},"content":"## TL;DR;\\r\\nIf you are in a collocated or same time zone team stop doing PRs and do trunk based development.\\r\\n\\r\\n## Long Version \\r\\n\\r\\nI have been working in multiple places over the last few years and have seen some practices that seem to be more a dogma than a value adding practice. I am specifically talking about `Pull Requests`. \\r\\n\\r\\n### Why PR\'s exist\\r\\n\\r\\nPull requests exist mostly as a practice accepted for `zero trust environments` (ex. Open Source). An attack vector on this type of environments is the ability of anyone to contribute meaning you could inject code that could create know vulnerabilities that packages will inherit. That is why maintainers validate code from unknown people.\\r\\n\\r\\nAlso PR\'s exist for highly distributed teams (around the clock) as a way to do knowledge sharing. If someone in side A of the world can follow and understand the changes for a feature that is being developed in side B of the world.\\r\\n\\r\\n### The issue\\r\\n\\r\\nCurrently most teams even if they work in the same office or timezone work in this PR way. \\r\\nA team should be a trust environment as we all have the same goal as we are bound by the same context. Meaning our team members are not the origin of an attack vector.\\r\\nIf we talk about knowledge sharing. There tend to be more efficient solutions like over the shoulder reviews or also pair programming.\\r\\nWith this 2 points we would be at parity with the PR value. Nevertheless PR\'s have a hidden cost in trust environments. One of this costs is related to ownership. Writing code that is broken in a branch does not affect anyone, at the same point some of the responsibility of validation goes to the reviewer that without the specifics need to validate if things are correct or not. We know humans suck at this, so why not let this to machines handle the responsibility?\\r\\nThe other hidden cost can be measure in throughput. PR\'s tend to wait and accumulate the more complex a change is the more it takes to merge it. Meaning the more time it takes to get to production. This does not only happens with features but also with fixes, meaning you can go from a capability of response time of minutes to hours.\\r\\n\\r\\n### The Alternative\\r\\n\\r\\nA lot of people would have already heard about `Trunk based development`."},{"id":"/2018/07/11/travis-ci-update-npm-package-dependencies-and-release","metadata":{"permalink":"/blog/2018/07/11/travis-ci-update-npm-package-dependencies-and-release","editUrl":"https://github.com/kanekotic/kanekotic-page/tree/main/blog/2018-07-11-travis-ci-update-npm-package-dependencies-and-release.md","source":"@site/blog/2018-07-11-travis-ci-update-npm-package-dependencies-and-release.md","title":"Update your npm package dependencies and release with Travis","description":"Update your npm package dependencies and release with Travis","date":"2018-07-11T07:27:28.000Z","formattedDate":"July 11, 2018","tags":[{"label":"ci","permalink":"/blog/tags/ci"},{"label":"cd","permalink":"/blog/tags/cd"},{"label":"versioning","permalink":"/blog/tags/versioning"},{"label":"npm","permalink":"/blog/tags/npm"},{"label":"travis","permalink":"/blog/tags/travis"},{"label":"travisci","permalink":"/blog/tags/travisci"},{"label":"github","permalink":"/blog/tags/github"},{"label":"cron","permalink":"/blog/tags/cron"}],"readingTime":2.01,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Update your npm package dependencies and release with Travis","summary":"Update your npm package dependencies and release with Travis","description":"Update your npm package dependencies and release with Travis","date":"2018-07-11T07:27:28.000Z","tags":["ci","cd","versioning","npm","travis","travisci","github","cron"],"draft":false,"published":false},"prevItem":{"title":"Stop doing PR\'s: Not all environment are zero trust","permalink":"/blog/2022/08/02/stop-prs"},"nextItem":{"title":"Create your User/Organization GitHub Page with Hugo + Travis","permalink":"/blog/2018/07/04/deploy-hugo-with-travis"}},"content":"As a member of the community that like to generate npm packages like libraries and cli tools, sometimes is difficult to maintain everything and keep your package up to date in the dependencies side. I am a fan of having static dependencies as versioning is not being held correctly in most of the npm world. So if you dont use exact packages you could run in the issue that a broken change makes from the night to the morning your awesome tool to break.\\n\\nThis practice could bring a headache to keep dependencies up to date because is a manual process. And manual process tend to be time consuming (at this point in time I have ~17 npm packages) meaning that if i want to simply do normal maintenance i will have to run everything for all those in maybe weekly or monthly bases. \\n\\nSo is a bit of a no situation for maintainers, but if you dont maintain your package people will not use it, because there is a concern about how active the project is, even if there are no open issues. For solving both of this things what i have decided is to ad to my CI/CD pipeline a script that runs only on cron jobs from travis ci.\\n\\n```yml\\nos: osx\\nlanguage: node_js\\nnode_js:\\n  - node\\nscript:\\n  - yarn test:cov\\nafter_success:\\n  - if [[ \\"${TRAVIS_EVENT_TYPE}\\" = \\"cron\\" ]]; then ./upgrade.sh; fi\\ndeploy:\\n  skip_cleanup: true\\n  provider: npm\\n  email: $NPM_EMAIL\\n  api_key: $NPM_TOKEN\\n  on:\\n    tags: true\\n```\\n\\nas you can see that is the normal `.travis.yml` for deploying into npm (you will have to define `NPM_EMAIL` and `NPM_TOKEN` as enviroment variables in your build configuration), the main diference is the step after success that if its the cron job going will run the next script.\\n\\n```bash\\n#!/bin/sh\\n\\nset -e\\n\\ngit config --global user.email $GH_EMAIL\\ngit config --global user.name $GH_USER\\n\\ngit remote add origin-master https://${GH_TOKEN}@github.com/${TRAVIS_REPO_SLUG}.git > /dev/null 2>&1\\n\\ngit fetch origin-master\\ngit checkout -b master-local origin-master/master\\n\\nyarn upgrade --latest\\ngit add .\\ngit commit --allow-empty -m \\"updated dependencies [skip ci]\\"\\n\\nyarn test\\nyarn version --patch\\n\\ngit push --quiet origin-master master-local:master\\ngit push --quiet origin-master master-local:master --tags\\n```\\n\\nthis script attaches the current state to a branch makes, upgrades the dependencies and if everything works fine generates a new commit and deploy a patch of the packages (you will have to define `GH_EMAIL`, `GH_USER` and `GH_TOKEN` as environment variables in your build configuration)."},{"id":"/2018/07/04/deploy-hugo-with-travis","metadata":{"permalink":"/blog/2018/07/04/deploy-hugo-with-travis","editUrl":"https://github.com/kanekotic/kanekotic-page/tree/main/blog/2018-07-04-deploy-hugo-with-travis.md","source":"@site/blog/2018-07-04-deploy-hugo-with-travis.md","title":"Create your User/Organization GitHub Page with Hugo + Travis","description":"Create your User/Organization GitHub Page with Hugo + Travis","date":"2018-07-04T06:35:42.000Z","formattedDate":"July 4, 2018","tags":[{"label":"ci","permalink":"/blog/tags/ci"},{"label":"cd","permalink":"/blog/tags/cd"},{"label":"versioning","permalink":"/blog/tags/versioning"},{"label":"travis","permalink":"/blog/tags/travis"},{"label":"travisci","permalink":"/blog/tags/travisci"},{"label":"github","permalink":"/blog/tags/github"}],"readingTime":1.875,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Create your User/Organization GitHub Page with Hugo + Travis","summary":"Create your User/Organization GitHub Page with Hugo + Travis","description":"Create your User/Organization GitHub Page with Hugo + Travis","date":"2018-07-04T06:35:42.000Z","tags":["ci","cd","versioning","travis","travisci","github"],"draft":false,"published":false},"prevItem":{"title":"Update your npm package dependencies and release with Travis","permalink":"/blog/2018/07/11/travis-ci-update-npm-package-dependencies-and-release"},"nextItem":{"title":"Unit Test CheatSheet","permalink":"/blog/2016/03/02/unit-test-cheatsheet"}},"content":"I have just finished migrating my static blog from Hexo to Hugo and one of the main things I care about is to be able to do continuous deployment of my profile and blog. There are quite a few blog posts out there but they are based on using shell scripts and it really becomes a pain to give permissions etc. In the next few lines you will see the simplest way I have found to do this (and is currently as this blog post is being published).\\n\\nYou will need to have:\\n\\n- A Github account.\\n- A Travis CI account.\\n- A Github repository with source code of your web page with Hugo (*1)\\n- A Github repository with the name `<your User or Organization>.github.com` (ex. kanekotic.github.com) (*2).\\n- A developer token from GitHub with commit capabilities (can create in github `Settings -> Developer Settings -> Personal Access Token -> Generate New Token` )\\n\\nI wont cover how to create a Hugo web page as this is best explained in the [quick start](https://gohugo.io/getting-started/quick-start/)) of Hugo.\\n\\nAfter you are happy with the content of your blog in the repository of source code (*1), and want to start deploying you will need to add a `.travis.yml` with the next content\\n\\n```yml\\nsudo: true\\ndist: trusty\\n\\ninstall:\\n  - sudo apt-get --yes install snapd\\n  - sudo snap install hugo\\n\\nscript:\\n  - /snap/bin/hugo \\n\\ndeploy:\\n  provider: pages\\n  local-dir: public\\n  repo: <User or Organization>/<User or Organization>.github.com\\n  target-branch: master\\n  skip-cleanup: true\\n  github-token: $GITHUB_TOKEN\\n  committer-from-gh: true\\n  keep-history: true\\n  on:\\n    branch: master\\n```\\n\\nyou will have to change the repo content to match your destination repository (*2). The previous code what does is installs hugo in the deployment machine, builds your web page and deploys using the pages plugin. If you have a custom domain make sure to set the property `fqdn` to your domain, if not you will overwrite this field in each commit.\\n\\nAfter adding the file you will have to go to Travis web page and toggle your code repository (*1) got to `More Options -> Settings -> Environment Variables` and add `GITHUB_TOKEN` as the token retrieved from github.\\n\\nAfter this in any commit in the master branch of your web page you will get it deployed and go live."},{"id":"/2016/03/02/unit-test-cheatsheet","metadata":{"permalink":"/blog/2016/03/02/unit-test-cheatsheet","editUrl":"https://github.com/kanekotic/kanekotic-page/tree/main/blog/2016-03-02-unit-test-cheatsheet.md","source":"@site/blog/2016-03-02-unit-test-cheatsheet.md","title":"Unit Test CheatSheet","description":"Unit Test CheatSheet","date":"2016-03-02T07:56:49.000Z","formattedDate":"March 2, 2016","tags":[{"label":"daily","permalink":"/blog/tags/daily"},{"label":"learn","permalink":"/blog/tags/learn"}],"readingTime":0.4,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Unit Test CheatSheet","summary":"Unit Test CheatSheet","description":"Unit Test CheatSheet","date":"2016-03-02T07:56:49.000Z","tags":["daily","learn"],"draft":false,"published":false},"prevItem":{"title":"Create your User/Organization GitHub Page with Hugo + Travis","permalink":"/blog/2018/07/04/deploy-hugo-with-travis"},"nextItem":{"title":"C# - Path.Combine","permalink":"/blog/2016/02/04/csharp-path-combine"}},"content":"##**mstest**\\n\\nlinks:\\n* [assert](https://msdn.microsoft.com/en-us/library/microsoft.visualstudio.testtools.unittesting.assert.aspx)\\n* [collection assert](https://msdn.microsoft.com/en-us/library/microsoft.visualstudio.testtools.unittesting.collectionassert.aspx)\\n\\n##**Nunit**\\n\\nlinks:\\n* [Attributes](https://github.com/nunit/docs/wiki/Attributes)\\n* [Assertion](https://github.com/nunit/docs/wiki/Assertions)\\n\\n##**MOQ**\\nExample\\n```cs\\npublic interface IFoo {\\n   public bool DoSomething(string);\\n}\\n\\nint calls;\\nvar mock = new Mock<IFoo>();\\nmock.Setup(foo => foo.DoSomething(It.IsAny<string>())).\\n         Returns((string s) => s.ToLower())\\n         .Callback(() => ++calls);\\n\\nmock.SetupProperty(f => f.Name, \\"foo\\");\\nmock.VerifySet(foo => foo.Name = \\"foo\\");\\n\\nmock.Verify(foo => foo.DoSomething(It.IsAny<string>()), Times.Never());\\n```\\n\\n##**Test internal Classes**\\n\\nIn assembly info to test internal classes you will need to know the name of the file\\n```cs\\n[assembly: InternalsVisibleToAttribute(\\"<Project Name>\\")]\\n```"},{"id":"/2016/02/04/csharp-path-combine","metadata":{"permalink":"/blog/2016/02/04/csharp-path-combine","editUrl":"https://github.com/kanekotic/kanekotic-page/tree/main/blog/2016-02-04-csharp-path-combine.md","source":"@site/blog/2016-02-04-csharp-path-combine.md","title":"C# - Path.Combine","description":"C# - Path.Combine","date":"2016-02-04T07:56:49.000Z","formattedDate":"February 4, 2016","tags":[{"label":"daily","permalink":"/blog/tags/daily"},{"label":"learn","permalink":"/blog/tags/learn"}],"readingTime":0.195,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"C# - Path.Combine","summary":"C# - Path.Combine","description":"C# - Path.Combine","date":"2016-02-04T07:56:49.000Z","tags":["daily","learn"],"draft":false,"published":false},"prevItem":{"title":"Unit Test CheatSheet","permalink":"/blog/2016/03/02/unit-test-cheatsheet"},"nextItem":{"title":"C# - Paths to system folders","permalink":"/blog/2016/01/29/csharp-path-to-system-folders"}},"content":"When using path.Combine if the second argument starts with a /. the first path is ignored and will give a path based on the C: drive.\\n```csharp\\nvar path = Path.Combine(firstpath,$@\\"\\\\myfolder\\\\myfile.txt\\");\\n```\\n\\nwill not return <firstpath\\\\myfolder\\\\myfile.txt> will return <C:\\\\\\\\\\\\myfolder\\\\myfile.txt>."},{"id":"/2016/01/29/csharp-path-to-system-folders","metadata":{"permalink":"/blog/2016/01/29/csharp-path-to-system-folders","editUrl":"https://github.com/kanekotic/kanekotic-page/tree/main/blog/2016-01-29-csharp-path-to-system-folders.md","source":"@site/blog/2016-01-29-csharp-path-to-system-folders.md","title":"C# - Paths to system folders","description":"C# - Paths to system folders","date":"2016-01-29T07:56:49.000Z","formattedDate":"January 29, 2016","tags":[{"label":"daily","permalink":"/blog/tags/daily"},{"label":"learn","permalink":"/blog/tags/learn"}],"readingTime":0.265,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"C# - Paths to system folders","summary":"C# - Paths to system folders","description":"C# - Paths to system folders","date":"2016-01-29T07:56:49.000Z","tags":["daily","learn"],"draft":false,"published":false},"prevItem":{"title":"C# - Path.Combine","permalink":"/blog/2016/02/04/csharp-path-combine"},"nextItem":{"title":"C# - Extension methods overlap with linq","permalink":"/blog/2016/01/28/extension-methods-overlap-with-linq"}},"content":"In the Environment class there is a property called SpecialFolder. This will provide the paths to folders like: Program files, desktop, AppData, etc. The use is the next one:\\n\\n```csharp\\nEnvironment.SpecialFolder.<NameSpecialFolder>\\n```\\n\\nWhere `<NameSpecialFolder>` is the given name of the folder required, for example the AppData Local folder will be\\n\\n```csharp\\nEnvironment.SpecialFolder.LocalApplicationData\\n```"},{"id":"/2016/01/28/extension-methods-overlap-with-linq","metadata":{"permalink":"/blog/2016/01/28/extension-methods-overlap-with-linq","editUrl":"https://github.com/kanekotic/kanekotic-page/tree/main/blog/2016-01-28-extension-methods-overlap-with-linq.md","source":"@site/blog/2016-01-28-extension-methods-overlap-with-linq.md","title":"C# - Extension methods overlap with linq","description":"C# - Extension methods overlap with linq","date":"2016-01-28T07:56:49.000Z","formattedDate":"January 28, 2016","tags":[{"label":"daily","permalink":"/blog/tags/daily"},{"label":"learn","permalink":"/blog/tags/learn"}],"readingTime":1.78,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"C# - Extension methods overlap with linq","summary":"C# - Extension methods overlap with linq","description":"C# - Extension methods overlap with linq","date":"2016-01-28T07:56:49.000Z","tags":["daily","learn"],"draft":false,"published":false},"prevItem":{"title":"C# - Paths to system folders","permalink":"/blog/2016/01/29/csharp-path-to-system-folders"},"nextItem":{"title":"C# - Fluent Interfaces with Extension Methods","permalink":"/blog/2016/01/27/interface-with-extension-methods"}},"content":"I have hit a corner case of extension methods and LINQ. Today I was declaring some extension methods to make my code more readable.So I created an extension method that gets an object and performs a direct cast:\\n\\n```csharp\\npublic static class GeneralExtensions\\n{\\n    public static T Cast<T>(this object o)\\n    {\\n    \\treturn (T)o;\\n    }\\n}\\n```\\n\\nThe intention was to be able to call my direct castings by something like this:\\n```csharp\\nMyObject.CastTo<MyInterface>();\\n```\\n\\nIt happens that in the same namespace I have an extension method that has a LINQ expression\\n```csharp\\nusing System;\\nusing System.Collections.Generic;\\nusing System.Linq;\\n\\npublic static class EnumExtenstions\\n{\\n\\tpublic static IEnumerable<string> UseLinq(this IEnumerable<object> collection)\\n\\t{\\n\\t\\treturn (from object value in collection select value.ToString() ).ToList();\\n\\t}\\n}\\n```\\n\\nAdding this first extension method to my code base cause the next error\\n```\\nError\\tCS1936\\tCould not find an implementation of the query pattern for source type \'object\'.  \'Select\' not found.\\n```\\n\\nHaving both extension methods in different namespaces (and not referred), or rename ```Cast<T>``` to something different solves the issue. This is caused for an overlap of the extension methods where the nearest one to the code is the one called.\\n\\n##**How bad Extension Methods over object could go?**\\n\\nThis is an extract from the answer of Eric Lippert, regarding the code:\\n\\n```csharp\\npublic static class GeneralExtensions\\n{\\n    public static T Cast<T>(this object o)\\n    {\\n    \\treturn (T)o;\\n    }\\n}\\n```\\nSide Effects of the ```cast<T>```:\\n* ```Cast<int>(123)``` unnecessarily boxes the int, ```(int)123``` does not.\\n* ```Cast< short >(123)``` fails but ```(short)123``` succeeds. There is no conversion from a boxed int to a short.\\n* Suppose you have a user-defined conversion from Animal to Shape. ```Cast<Shape>(new Tiger())``` fails but ```(Shape) new Tiger()``` succeeds.\\n* Suppose q is a nullable int that happens to be null. ```Cast<string>(q)``` succeeds! But ```(string)q``` would fail at compile time\\n* Etc\\n\\nCast method has some overlap with the real cast operator but is not a substitute for it. To capture the semantics of the cast operator there is a need to use dynamic, which starts the compiler at runtime and does the compile time analysis on runtime types."},{"id":"/2016/01/27/interface-with-extension-methods","metadata":{"permalink":"/blog/2016/01/27/interface-with-extension-methods","editUrl":"https://github.com/kanekotic/kanekotic-page/tree/main/blog/2016-01-27-interface-with-extension-methods.md","source":"@site/blog/2016-01-27-interface-with-extension-methods.md","title":"C# - Fluent Interfaces with Extension Methods","description":"C# - Fluent Interfaces with Extension Methods","date":"2016-01-27T07:56:49.000Z","formattedDate":"January 27, 2016","tags":[{"label":"daily","permalink":"/blog/tags/daily"},{"label":"learn","permalink":"/blog/tags/learn"}],"readingTime":0.87,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"C# - Fluent Interfaces with Extension Methods","summary":"C# - Fluent Interfaces with Extension Methods","description":"C# - Fluent Interfaces with Extension Methods","date":"2016-01-27T07:56:49.000Z","tags":["daily","learn"],"draft":false,"published":false},"prevItem":{"title":"C# - Extension methods overlap with linq","permalink":"/blog/2016/01/28/extension-methods-overlap-with-linq"},"nextItem":{"title":"Meteor the beginning","permalink":"/blog/2016/01/27/meteor-the-beginning"}},"content":"I have not experiment to much with fluent interfaces. But is something cool especially to make code that is expressive.\\n\\n```csharp\\npublic struct Coordenates\\n    {\\n        public double X { get; set; }\\n        public double Y { get; set; }\\n        public double Z { get; set; }\\n    }\\n\\n    public static class CoordenatesExtensions\\n    {\\n\\n        public static Coordenates X(this Coordenates coordenates, double value)\\n        {\\n            coordenates.X = value;\\n            return coordenates;\\n        }\\n\\n        public static Coordenates Y(this Coordenates coordenates, double value)\\n        {\\n            coordenates.Y = value;\\n            return coordenates;\\n        }\\n        public static Coordenates Z(this Coordenates coordenates, double value)\\n        {\\n            coordenates.Z = value;\\n            return coordenates;\\n        }\\n    }\\n\\n    public class Points\\n    {\\n        private Coordenates point;\\n        public Points()\\n        {\\n            point = new Coordenates().X(2.1).Y(2.4).Z(3.2);\\n        }\\n    }\\n```\\nalso can be used with some language properties to make it more expressive\\n```csharp\\npublic static class GeneralExtensions\\n{\\n    public static T As<T>(this object o) where T : class\\n    {\\n        return o as T;\\n    }\\n\\n    public static T Cast<T>(this object o)\\n    {\\n        return (T)o;\\n    }\\n\\n    public static bool Is<T>(this object o)\\n    {\\n        return o is T;\\n    }\\n}\\n\\n```"},{"id":"/2016/01/27/meteor-the-beginning","metadata":{"permalink":"/blog/2016/01/27/meteor-the-beginning","editUrl":"https://github.com/kanekotic/kanekotic-page/tree/main/blog/2016-01-27-meteor-the-beginning.md","source":"@site/blog/2016-01-27-meteor-the-beginning.md","title":"Meteor the beginning","description":"Meteor the beginning","date":"2016-01-27T07:56:49.000Z","formattedDate":"January 27, 2016","tags":[{"label":"daily","permalink":"/blog/tags/daily"},{"label":"learn","permalink":"/blog/tags/learn"}],"readingTime":0.55,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Meteor the beginning","summary":"Meteor the beginning","description":"Meteor the beginning","date":"2016-01-27T07:56:49.000Z","tags":["daily","learn"],"draft":false,"published":false},"prevItem":{"title":"C# - Fluent Interfaces with Extension Methods","permalink":"/blog/2016/01/27/interface-with-extension-methods"},"nextItem":{"title":"Coding - C# - Complex Constructors","permalink":"/blog/2016/01/26/c-sharp-complex-constructors"}},"content":"##**Documentation**\\n\\nI found a lot of interesting things in this link, i can setup my view model to a real JavaScript object.\\n\\nhttps://viewmodel.meteor.com/docs\\n\\n##**Markdown**\\n\\nTo add markdown support you will have to add the markdown package:\\n\\n```\\nmeteor add markdown\\n```\\n\\nIf you also want your snippets of code to have some style you will also need to add the highlight.js package:\\n\\n```\\nmeteor add simple:highlight.js\\n```\\n\\n##**AutoForm**\\n\\nto get a multi-line input you need to make sure you get a textarea. This can be done in the collection definition by:\\n```js\\nTestSchema = new SimpleSchema({\\n    content: {\\n        type: String,\\n        label: \\"Content\\",\\n        autoform: {\\n            rows: 10\\n        }\\n    }\\n});\\n```"},{"id":"/2016/01/26/c-sharp-complex-constructors","metadata":{"permalink":"/blog/2016/01/26/c-sharp-complex-constructors","editUrl":"https://github.com/kanekotic/kanekotic-page/tree/main/blog/2016-01-26-c-sharp-complex-constructors.md","source":"@site/blog/2016-01-26-c-sharp-complex-constructors.md","title":"Coding - C# - Complex Constructors","description":"Coding - C# - Complex Constructors","date":"2016-01-26T07:56:49.000Z","formattedDate":"January 26, 2016","tags":[{"label":"daily","permalink":"/blog/tags/daily"},{"label":"learn","permalink":"/blog/tags/learn"}],"readingTime":0.985,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Coding - C# - Complex Constructors","description":"Coding - C# - Complex Constructors","date":"2016-01-26T07:56:49.000Z","tags":["daily","learn"],"draft":false,"published":false},"prevItem":{"title":"Meteor the beginning","permalink":"/blog/2016/01/27/meteor-the-beginning"}},"content":"When doing complex objects using an object to help the building is welcome.\\n```csharp\\npublic class Complex\\n{\\n    double x;\\n    double y;\\n    double z;\\n\\n    float height;\\n    float width;\\n\\n    string foreground;\\n    string background;\\n\\n    public Complex()\\n    {\\n        x = 1.456;\\n        y = 1.234;\\n        z = 1.789;\\n\\n        height = 10.12;\\n        width = 10.14;\\n\\n        foreground = \\"#FFF\\";\\n        background = \\"#FA1\\";\\n    }\\n\\n}\\n```\\nIn this way you remove some complexity of just adding steps in your constructor to something more abstract and can contain the logic.\\n\\n```csharp\\npublic class Complex\\n{\\n    public double X { get; set; }\\n    public double Y { get; set; }\\n    public double Z { get; set; }\\n\\n    public double Height { get; set; }\\n    public double Width { get; set; }\\n\\n    public string Foreground { get; set; }\\n    public string Background { get; set; }\\n\\n    public Complex(ComplexBuildHelper buildHelper)\\n    {\\n        buildHelper.Construct(this);\\n    }\\n\\n}\\n\\npublic class ComplexBuildHelper\\n{\\n    public void Construct(Complex reference)\\n    {\\n        BuildPosition(reference);\\n        BuildDimension(reference);\\n        BuildCharacteristics(reference);\\n    }\\n\\n    private void BuildPosition(Complex reference)\\n    {\\n        reference.X = 1.456;\\n        reference.Y = 1.234;\\n        reference.Z = 1.789;\\n    }\\n\\n    private void BuildDimension(Complex reference)\\n    {\\n        reference.Height = 10.12;\\n        reference.Width = 10.14;\\n    }\\n\\n    private void BuildCharacteristics(Complex reference)\\n    {\\n        reference.Foreground = \\"#FFF\\";\\n        reference.Background = \\"#FA1\\";\\n    }\\n}\\n```"}]}')}}]);