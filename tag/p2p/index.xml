<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>p2p | Kanekotic</title><link>https://www.kanekotic.com/tag/p2p/</link><atom:link href="https://www.kanekotic.com/tag/p2p/index.xml" rel="self" type="application/rss+xml"/><description>p2p</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><copyright>kanekotic Â© 2021</copyright><lastBuildDate>Wed, 27 Apr 2016 00:00:00 +0000</lastBuildDate><image><url>https://www.kanekotic.com/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url><title>p2p</title><link>https://www.kanekotic.com/tag/p2p/</link></image><item><title>Peer2Sync</title><link>https://www.kanekotic.com/project/peer-2-sync/</link><pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate><guid>https://www.kanekotic.com/project/peer-2-sync/</guid><description>&lt;h1 id="logomakr_0ewpnuhttpscloudgithubusercontentcomassets307120817784932e2b96a14-657e-11e6-9cf9-ad0000e3e18cpng">&lt;img src="https://cloud.githubusercontent.com/assets/3071208/17784932/e2b96a14-657e-11e6-9cf9-ad0000e3e18c.png" alt="logomakr_0ewpnu">&lt;/h1>
&lt;p>##Intro&lt;/p>
&lt;p>Protocol capable of P2P (master to master) syncing key-value datastores. using &lt;code>c++&lt;/code> high performance web server with a redis backend. The path to requests is &lt;code>/rpc&lt;/code> and takes only &lt;code>POST&lt;/code> requests in &lt;code>JSON-RPC 2.0&lt;/code>. The methods that have been implemented are:&lt;/p>
&lt;ul>
&lt;li>&lt;code>datastorePut({ collection: String, changes: [Object] }) -&amp;gt; &lt;/code>: sync objects to the server.&lt;/li>
&lt;li>&lt;code>datastoreGet({ collection: String, all: Boolean, ids: [String] }) -&amp;gt; [Object]&lt;/code>: retrieve all of the objects which are newer on the server.&lt;/li>
&lt;li>&lt;code>datastoreMeta({ collection: String }) -&amp;gt; [id,mtime]&lt;/code>: get last modification times of all objects upstream.&lt;/li>
&lt;/ul>
&lt;p>Arguments explanation:&lt;/p>
&lt;ul>
&lt;li>&lt;code>collection&lt;/code>: this is a string identifier of the collection we want to sync.&lt;/li>
&lt;li>&lt;code>changes&lt;/code>: this is an array of objects to save in the collection; every object can be anything (JSON object). Has three special properties:
&lt;ul>
&lt;li>&lt;code>_id&lt;/code>: (always required) is the object key/id.&lt;/li>
&lt;li>&lt;code>_mtime&lt;/code>: is the last time the object was modified. This is a
&lt;a href="https://en.wikipedia.org/wiki/Unix_time" target="_blank" rel="noopener">POSIX time&lt;/a> in millisecons.&lt;/li>
&lt;li>&lt;code>_delete&lt;/code>: is set to true if we want to remove this object from the collection. If not it can be either false or not included.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>all&lt;/code>: this is a boolean which, when set to true, makes datastoreGet return all objects in the collection&lt;/li>
&lt;li>&lt;code>ids&lt;/code>: array of strings, specifies which objects to fetch from the database.&lt;/li>
&lt;/ul>
&lt;p>The implementation is integrated in Travis-CI, that will generate and publish automatically containers to easy deploy the application.&lt;/p>
&lt;h2 id="deployment">Deployment&lt;/h2>
&lt;p>Download the container from the docker-hub&lt;/p>
&lt;pre>&lt;code>docker pull kanekotic/p2s
&lt;/code>&lt;/pre>
&lt;p>And execute with the next command&lt;/p>
&lt;pre>&lt;code>docker run -p &amp;lt;service port&amp;gt; -e PORT=&amp;lt;service port&amp;gt; -e REDIS_IP=&amp;lt;redis ip&amp;gt; -e REDIS_PORT=&amp;lt;redis port&amp;gt; --net=host kanekotic/p2s
&lt;/code>&lt;/pre>
&lt;h2 id="development">Development&lt;/h2>
&lt;p>Current development enviroment is based on un an Ubuntu machine. Please follow the next steps to setup the enviroment:&lt;/p>
&lt;ul>
&lt;li>Basic building will require the next packages&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>sudo apt-get install redis-server libboost-all-dev gcc-5 g++-5 libgtest-dev cmake qt5-qmake qt5-default qtbase5-dev qttools5-dev-tools
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>To build gtest run&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>cd /usr/src/gtest
sudo cmake .
sudo cmake --build .
sudo mv libg* /usr/local/lib/
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>you will also need to pull the dependency for the redis client trought&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>git clone https://github.com/Cylix/cpp_redis.git
cd cpp_redis
mkdir build
cd build
cmake ..
make -j
sudo make install -j
sudo cp /usr/local/lib/libcpp_redis.so /usr/lib/libcpp_redis.so
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>the code can be build using the next command line on the directory&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>qmake
make
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>optional&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Use &lt;code>Qt Creator&lt;/code> as development enviroment, it can be installed by:&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>sudo apt-get install qtcreator
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>Install and use Postman for integration testing (&lt;code>./test/Test_P2S_Postman.json&lt;/code>).&lt;/li>
&lt;/ul></description></item></channel></rss>